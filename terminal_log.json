[
  {
    "id": "ffe898cd-e9c9-4c2c-90a5-168dc440850f",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T15:18:37.296Z",
    "type": "stdout",
    "terminal_output": "Welcome to Ubuntu 24.04.2 LTS (GNU/Linux 6.6.87.2-microsoft-standard-WSL2 x86_64)\r\n\r\n * Documentation:  https://help.ubuntu.com\r\n * Management:     https://landscape.canonical.com\r\n * Support:        https://ubuntu.com/pro\r\n\r\n System information as of Tue Sep  2 18:17:39 MSK 2025\r\n\r\n * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s\r\n   just raised the bar for easy, resilient and secure K8s cluster deployment.\r\n\r\n   https://ubuntu.com/engage/secure-kubernetes-at-the-edge\r\nLast login: Wed Aug 27 11:13:27 2025 from 172.26.64.1\r\r\nWelcome to Ubuntu 24.04.2 LTS (GNU/Linux 6.6.87.2-microsoft-standard-WSL2 x86_64)\r\n\r\n * Documentation:  https://help.ubuntu.com\r\n * Management:     https://landscape.canonical.com\r\n * Support:        https://ubuntu.com/pro\r\n\r\n System information as of Tue Sep  2 18:17:39 MSK 2025\r\n\r\n * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s\r\n   just raised the bar for easy, resilient and secure K8s cluster deployment.\r\n\r\n   https://ubuntu.com/engage/secure-kubernetes-at-the-edge\r\n\r\nThis message is shown once a day. To disable it please create the\r\n/home/roman/.hushlogin file.",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224"
  },
  {
    "id": "987746bc-1329-44ff-ba49-d3c1055772eb",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T15:18:54.043Z",
    "type": "stdout",
    "terminal_output": "curl -X POST http://localhost:3002/api/send-request \\\r\n\r-H \"Content-Type: application/json\" \\\r\n\r-d '{\r\n\r  \"model\": \"llama-3.3-70b-versatile\",\r\n\r  \"prompt\": \"Отвечай на основе предоставленного контекста\",\r\n\r  \"inputText\": \"Как настроить GROQ API?\",\r\n\r  \"useRag\": true,\r\n\r  \"contextCode\": \"documentation\",\r\n\r  \"saveResponse\": true\r\n\r}'\r\u001b]0;roman@DESKTOP-QBT4OQT: ~\u0007roman@DESKTOP-QBT4OQT:~$ curl -X POST http://localhost:3002/api/send-request \\\r\n\r-H \"Content-Type: application/json\" \\\r\n\r-d '{\r\n\r  \"model\": \"llama-3.3-70b-versatile\",\r\n\r  \"prompt\": \"Отвечай на основе предоставленного контекста\",\r\n\r  \"inputText\": \"Как настроить GROQ API?\",\r\n\r  \"useRag\": true,\r\n\r  \"contextCode\": \"documentation\",\r\n\r  \"saveResponse\": true\r\n\r}'\b\r\u001b]0;roman@DESKTOP-QBT4OQT: ~\u0007roman@DESKTOP-QBT4OQT:~$ exit\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\b\b\b\bcurl -X POST http://localhost:3002/api/send-request \\\r\n\r-H \"Content-Type: application/json\" \\\r\n\r-d '{\r\n\r  \"model\": \"llama-3.3-70b-versatile\",\r\n\r  \"prompt\": \"Отвечай на основе предоставленного контекста\",\r\n\r  \"inputText\": \"Как настроить GROQ API?\",\r\n\r  \"useRag\": true,\r\n\r  \"contextCode\": \"documentation\",\r\n\r  \"saveResponse\": true",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224"
  },
  {
    "id": "753ea9fc-0a17-426b-a583-18d16ae84a69",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T15:19:08.830Z",
    "type": "stdin",
    "executed_command": "curl -X POST http://192.168.1.254:3002/api/send-request \\",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224"
  },
  {
    "id": "dc4b18ed-521a-4919-bf76-a1aeb4f1070a",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T15:19:09.005Z",
    "type": "stdout",
    "terminal_output": "\bP\bP\bP\bP\bP\bP\bP\bP\bP \b1 \b9 \b2 \b. \b1 \b6 \b8 \b. \b1 \b. \b2 \b5 \b4",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224",
    "stdin_id": "753ea9fc-0a17-426b-a583-18d16ae84a69"
  },
  {
    "id": "cb955e3d-ee55-42bb-8f24-ad90d85f3553",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T15:20:36.762Z",
    "type": "stdin",
    "executed_command": "curl -X POST http://192.168.1.254:3002/api/send-request -H \"Content-Type: applicat",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224"
  },
  {
    "id": "57393a74-c8c2-46ca-be2e-5a1ef0990681",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T15:20:37.331Z",
    "type": "stdout",
    "terminal_output": "curl -X POST http://192.168.1.254:3002/api/send-request -H \"Content-Type: application/json\" -d '{\u0000\r\n\r  \"model\": \"llama-3.3-70b-versatile\",\r\n\r  \"prompt\": \"Отвечай на основе предоставленного контекста\",\r\n\r  \"inputText\": \"Как настроить GROQ API?\",\r\n\r  \"useRag\": true,\r\n\r  \"contextCode\": \"documentation\",\r\n\r  \"saveResponse\": true\r\n\r}'\b\r\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r\b\b\b\b\b\b\b\bexit\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\b\b\b\bcurl -X POST http://192.168.1.254:3002/api/send-request -H \"Content-Type: application/json\" -d '{\u0000\r\n\r  \"model\": \"llama-3.3-70b-versatile\",\r\n\r  \"prompt\": \"Отвечай на основе предоставленного контекста\",\r\n\r  \"inputText\": \"Как настроить GROQ API?\",\r\n\r  \"useRag\": true,\r\n\r  \"contextCode\": \"documentation\",\r\n\r  \"saveResponse\": true\r\n\r}'\r\u001b]0;roman@DESKTOP-QBT4OQT: ~\u0007roman@DESKTOP-QBT4OQT:~$ \r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\rcurl -X POST http://192.168.1.254:3002/api/send-request -H \"Content-Type: application/json\" -d '{\u0000\r\n\r  \"model\": \"llama-3.3-70b-versatile\",\r\n\r  \"prompt\": \"Отвечай на основе предоставленного контекста\",\r\n\r  \"inputText\": \"Как настроить GROQ API?\",\r\n\r  \"useRag\": true,\r\n\r  \"contextCode\": \"documentation\",\r\n\r  \"saveResponse\": true\r\n\r}'\b\r\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r\b\b\b\b\b\b\b\b\b\b\b\b\bP\",\b\b\bP\",\b\b\bP\",\b\b\bP\",\b\b\bP\",\b\b\bP\",\b\b\bP\",\b\b\bP\",\b\b\bP\",\b\b\bP\",\b\b\bP\",\b\b\bP\",\b\b\bP\",\b\b\bP\",\b\b\bP\",\b\b\bP\",\b\b\bP\",\b\b\bP\",\b\b\bP\",\b\b\bP\",\b\b\bP\",\b\b\bP\",\b\b\bP\",\b\bdeepseek/deepseek-chat:free\",\b\b\rdeepseek/deepseek-chat:free\",\b\b",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224",
    "stdin_id": "cb955e3d-ee55-42bb-8f24-ad90d85f3553"
  },
  {
    "id": "4f5a61e1-00fc-44ac-bb3e-88a04ce68017",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T16:07:23.035Z",
    "type": "stdin",
    "executed_command": "ping usa",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224"
  },
  {
    "id": "535ee89b-45b9-4a0b-98d6-629211a2344b",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T16:07:25.874Z",
    "type": "stdout",
    "terminal_output": "зт\b\b\u0007з \b\bping usa\r\n\rPING usa (87.251.79.241) 56(84) bytes of data.\r\n64 bytes from usa (87.251.79.241): icmp_seq=1 ttl=50 time=174 ms\r\n64 bytes from usa (87.251.79.241): icmp_seq=2 ttl=50 time=174 ms\r\n64 bytes from usa (87.251.79.241): icmp_seq=3 ttl=50 time=174 ms\r\n^C\r\n--- usa ping statistics ---\r\n3 packets transmitted, 3 received, 0% packet loss, time 1998ms\r\nrtt min/avg/max/mdev = 173.536/173.977/174.260/0.316 ms",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224",
    "stdin_id": "4f5a61e1-00fc-44ac-bb3e-88a04ce68017"
  },
  {
    "id": "d9522f65-5707-4759-a3c2-1e610766d83f",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T16:07:41.721Z",
    "type": "stdin",
    "executed_command": "curl -X POST http://usa:3002/api/send-request -H \"Content-Type: applicatio",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224"
  },
  {
    "id": "5f57a10f-29d5-4775-8e73-1bea4b4fc893",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T16:07:52.130Z",
    "type": "stdout",
    "terminal_output": "ping usa\b\b\b\b\b\b\b\bcurl -X POST http://192.168.1.254:3002/api/send-request -H \"Content-Type: application/json\" -d '{\u0000\r\n\r  \"model\": \"deepseek/deepseek-chat:free\",\r\n\r  \"prompt\": \"Отвечай на основе предоставленного контекста\",\r\n\r  \"inputText\": \"Как настроить GROQ API?\",\r\n\r  \"useRag\": true,\r\n\r  \"contextCode\": \"documentation\",\r\n\r  \"saveResponse\": true\r\n\r}'\b\r\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r\b\b\b\b\b\b\b\b\b:3002/api/send-request -H \"Content-Type: application/json\" -d '{ \r\u001b]0;roman@DESKTOP-QBT4OQT: ~\u0007roman@DESKTOP-QBT4OQT:~$ \b:3002/api/send-request -H \"Content-Type: application/json\" -d '{ \r \r\u001b]0;roman@DESKTOP-QBT4OQT: ~\u0007roman@DESKTOP-QBT4OQT:~$ \bP\r\n\r  \"model\": \"deepseek/deepseek-chat:free\",\r\n\rprompt\": \"Отвечай на основе предоставленного контекста\",\r\n\rPinputText\": \"Как настроить GROQ API?\",\r\n\rPuseRag\": true,\r\n\rcontextCode\": \"documentation\",\r\n\rPsaveResponse\": true\r\n\r}'\r\n\r\bP\bP\bP\bP\bP\bP\bP\bP\bP\bP \bu \bs \ba",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224",
    "stdin_id": "d9522f65-5707-4759-a3c2-1e610766d83f"
  },
  {
    "id": "9350441a-3ad1-4d2d-b629-74a7a1dbc55b",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T16:16:24.360Z",
    "type": "stdin",
    "executed_command": "nano test_curl.sh",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224"
  },
  {
    "id": "c932bb53-7b97-4db0-ac85-8264e709dcd4",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T16:17:28.514Z",
    "type": "stdin",
    "executed_command": "1\"",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224"
  },
  {
    "id": "355f430e-c171-4255-8e23-71032d7ee853",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T16:17:28.523Z",
    "type": "stdout",
    "terminal_output": "сфе \b\b\b\bcat \b\b\b\b\u0007\u0007\u0007\u0007\u0007\u0007\u0007nano tests\\test_curl.sh\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\btests\\test_curl.sh\b\b\b\b\b\b\b\b\b\b\b\b\bPtest_curl.sh\b\b\b\b\b\b\b\b\b\b\b\b\bPtest_curl.sh\b\b\b\b\b\b\b\b\b\b\b\bPest_curl.sh\b\b\b\b\b\b\b\b\b\b\b\b\bPtest_curl.sh\b\b\b\b\b\b\b\b\b\b\b\b\bPtest_curl.sh\b\b\b\b\b\b\b\b\b\b\b\bPest_curl.sh\b\b\b\b\b\b\b\b\b\b\b\b\r\n\r[ New File ]  GNU nano 7.2                                          test_curl.sh                                                    \r^G Help^O Write Out   ^W Where Is    ^K Cut^T Execute     ^C Location    M-U UndoM-A Set Mark\r^X Exit^R Read File   ^\\ Replace     ^U Paste^J Justify     ^/ Go To Line  M-E RedoM-6 Copy\r*\r# --- 5. Базовые тесты для RAG API ---\rprint_header \"5. Базовые тесты для RAG API\"\recho \"5.1. Получение списка контекстных кодов (GET /api/rag/context-codes)\"\rcurl -X GET \"${BASE_URL}/api/rag/context-codes\" -H \"${HEADER_ACCEPT}\" | jq .\rprint_footer\recho \"5.2. Получение списка документов (GET /api/rag/documents)\"\rcurl -X GET \"${BASE_URL}/api/rag/documents\" -H \"${HEADER_ACCEPT}\" | jq .\rprint_footer\rprint_header \"Все тесты завершены!\"\recho \"4.1. Получение последних 5 записей из истории (GET /api/responses)\"\recho \"(Должна содержать ответ из предыдущего теста)\"\rcurl -X GET \"${BASE_URL}/api/responses?limit=5\" -H \"${HEADER_ACCEPT}\" | jq .\rprint_footer\r\"saveResponse\": false\r}' | jq .\rprint_footer\r# --- 4. Тестирование истории ответов ---\rprint_header \"4. Тест истории ответов (/api/responses)\"\r-H \"${HEADER_CONTENT_TYPE}\" \\\r-d '{\b\"model\": \"llama3-8b-8192\",\"provider\": \"groq\",\"prompt\": \"You are a helpful assistant.\",\"inputText\": \"What is the capital of France? Answer in one word.\",\rprint_footer\r# --- 3. Тестирование основного эндпоинта отправки запроса к AI ---\rprint_header \"3. Тест отправки запроса к AI (/api/send-request)\"\recho \"3.1. Отправка простого запроса к модели Groq (POST /api/send-request)\"\rcurl -X POST \"${BASE_URL}/api/send-request\" \\\rcurl -X DELETE \"${BASE_URL}/api/prompts/${PROMPT_NAME}\" | jq .\rprint_footer\recho \"2.6. Финальная проверка списка промптов\"\rcurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\" | jq '.[] | select(.name==\"'\"${PROMPT_NAME}\"'\")'\recho \"(Ожидается пустой результат)\"\recho \"2.4. Повторное получение списка для проверки обновления\"\rcurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\" | jq '.[] | select(.name==\"'\"${PROMPT_NAME}\"'\")'\rprint_footer\recho \"2.5. Удаление промпта (DELETE /api/prompts/:name)\"\recho \"2.3. Обновление промпта (PUT /api/prompts/:name)\"\rcurl -X PUT \"${BASE_URL}/api/prompts/${PROMPT_NAME}\" \\\r-H \"${HEADER_CONTENT_TYPE}\" \\\r-d '{\b\"text\": \"Это обновленный тестовый системный промпт.\"\r}' | jq .\rprint_footer\rprint_footer\recho \"2.2. Получение списка всех промптов для проверки (GET /api/prompts)\"\rcurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\" | jq '.[] | select(.name==\"'\"${PROMPT_NAME}\"'\")'\rprint_footer\rcurl -X POST \"${BASE_URL}/api/prompts\" \\\r-H \"${HEADER_CONTENT_TYPE}\" \\\r-d '{\b\"name\": \"'\"${PROMPT_NAME}\"'\",\"text\": \"Это тестовый системный промпт.\"\r}' | jq .\recho \"1.2. Запрос конфигурации API (GET /api/config)\"\rcurl -X GET \"${BASE_URL}/api/config\" -H \"${HEADER_ACCEPT}\" | jq .\rprint_footer\recho \"1.3. Запрос списка всех доступных моделей (GET /api/all-models)\"\rcurl -X GET \"${BASE_URL}/api/all-models\" -H \"${HEADER_ACCEPT}\" | jq '.[].name'\rprint_footer\r# --- 2. Тестирование CRUD операций для Промптов (/api/prompts) ---\rprint_header \"2. Тесты CRUD для Промптов\"\recho \"2.1. Создание нового промпта (POST /api/prompts)\"\r# --- 1. Проверка состояния сервера и конфигурации ---\rprint_header \"1. Тесты состояния сервера и конфигурации\"\recho \"1.1. Запрос информации о сервере (GET /server-info)\"\rcurl -X GET \"${BASE_URL}/server-info\" -H \"${HEADER_ACCEPT}\" | jq .\rprint_footer\recho \"\"\r}\b# ==============================================================================\r# --- ТЕСТОВЫЙ СЦЕНАРИЙ ---\r# ==============================================================================\recho \"\"\r}\bfunction print_footer() {echo \"\"echo \"------------------------------------------------------------------------------\"\r# --- Вспомогательные функции ---\rfunction print_header() {echo \"\"echo \"==============================================================================\"echo \" $1\"echo \"==============================================================================\"\r# --- Конфигурация ---\rBASE_URL=\"http://localhost:3002\"\rHEADER_CONTENT_TYPE=\"Content-Type: application/json\"\rHEADER_ACCEPT=\"Accept: application/json\"\rPROMPT_NAME=\"test_prompt_$(date +%s)\" # Уникальное имя промпта для каждого запуска\r#!/bin/bash\r# ==============================================================================\r# CURL-тесты для REST API сервиса AI Analytics Interface\r#\b# Использование:\r# 1. Убедитесь, что сервер запущен: node server.js\r# 2. Запустите этот скрипт из терминала: bash ./tests/test_curl.sh\r# 3. Скрипт последовательно выполнит тесты и выведет результаты.\r# ==============================================================================",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224",
    "stdin_id": "c932bb53-7b97-4db0-ac85-8264e709dcd4"
  },
  {
    "id": "30de89f3-93d4-4881-9495-9c0f8698a6ed",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T16:17:36.519Z",
    "type": "stdin",
    "executed_command": "bash ./test_curl.sh",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224"
  },
  {
    "id": "9e483e86-d53d-4794-b527-69bf9f9137cc",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T16:17:36.739Z",
    "type": "stdout",
    "terminal_output": "bash ./test_curl.sh \r\n\r\r\n==============================================================================\r\n 1. Тесты состояния сервера и конфигурации\r\n==============================================================================\r\n\r\n1.1. Запрос информации о сервере (GET /server-info)\r\n./test_curl.sh: line 41: jq: command not found\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100   234  100   234    0     0  35358      0 --:--:-- --:--:-- --:--:-- 39000\r\ncurl: Failed writing body\r\n\r\n------------------------------------------------------------------------------\r\n\r\n1.2. Запрос конфигурации API (GET /api/config)\r\n./test_curl.sh: line 45: jq: command not found\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100   368  100   368    0     0   174k      0 --:--:-- --:--:-- --:--:--  179k\r\ncurl: Failed writing body\r\n\r\n------------------------------------------------------------------------------\r\n\r\n1.3. Запрос списка всех доступных моделей (GET /api/all-models)\r\n./test_curl.sh: line 49: jq: command not found\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0  5374    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r\ncurl: (23) Failure writing output to destination\r\n\r\n------------------------------------------------------------------------------\r\n\r\n\r\n==============================================================================\r\n 2. Тесты CRUD для Промптов\r\n==============================================================================\r\n\r\n2.1. Создание нового промпта (POST /api/prompts)\r\n./test_curl.sh: line 61: jq: command not found\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100   151  100    39  100   112   7641  21943 --:--:-- --:--:-- --:--:-- 30200\r\ncurl: Failed writing body\r\n\r\n------------------------------------------------------------------------------\r\n\r\n2.2. Получение списка всех промптов для проверки (GET /api/prompts)\r\n./test_curl.sh: line 65: jq: command not found\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0 10580    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r\ncurl: (23) Failure writing output to destination\r\n\r\n------------------------------------------------------------------------------\r\n\r\n2.3. Обновление промпта (PUT /api/prompts/:name)\r\n./test_curl.sh: line 73: jq: command not found\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100   138  100    41  100    97  10475  24782 --:--:-- --:--:-- --:--:-- 46000\r\ncurl: Failed writing body\r\n\r\n------------------------------------------------------------------------------\r\n\r\n2.4. Повторное получение списка для проверки обновления\r\n./test_curl.sh: line 77: jq: command not found\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0 10603    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r\ncurl: (23) Failure writing output to destination\r\n\r\n------------------------------------------------------------------------------\r\n\r\n2.5. Удаление промпта (DELETE /api/prompts/:name)\r\n./test_curl.sh: line 81: jq: command not found\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    41  100    41    0     0  11379      0 --:--:-- --:--:-- --:--:-- 13666\r\ncurl: Failed writing body\r\n\r\n------------------------------------------------------------------------------\r\n\r\n2.6. Финальная проверка списка промптов\r\n./test_curl.sh: line 85: jq: command not found\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0 10480    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r\ncurl: (23) Failure writing output to destination\r\n(Ожидается пустой результат)\r\n\r\n------------------------------------------------------------------------------\r\n\r\n\r\n==============================================================================\r\n 3. Тест отправки запроса к AI (/api/send-request)\r\n==============================================================================\r\n\r\n3.1. Отправка простого запроса к модели Groq (POST /api/send-request)\r\n./test_curl.sh: line 101: jq: command not found\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100   599  100   398  100   201   5471   2763 --:--:-- --:--:-- --:--:--  8319\r\ncurl: Failed writing body\r\n\r\n------------------------------------------------------------------------------\r\n\r\n\r\n==============================================================================\r\n 4. Тест истории ответов (/api/responses)\r\n==============================================================================\r\n\r\n4.1. Получение последних 5 записей из истории (GET /api/responses)\r\n(Должна содержать ответ из предыдущего теста)\r\n./test_curl.sh: line 109: jq: command not found\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0  4725    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r\ncurl: (23) Failure writing output to destination\r\n\r\n------------------------------------------------------------------------------\r\n\r\n\r\n==============================================================================\r\n 5. Базовые тесты для RAG API\r\n==============================================================================\r\n\r\n5.1. Получение списка контекстных кодов (GET /api/rag/context-codes)\r\n./test_curl.sh: line 116: jq: command not found\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    80  100    80    0     0  12574      0 --:--:-- --:--:-- --:--:-- 13333\r\ncurl: Failed writing body\r\n\r\n------------------------------------------------------------------------------\r\n\r\n5.2. Получение списка документов (GET /api/rag/documents)\r\n./test_curl.sh: line 120: jq: command not found\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    82  100    82    0     0  14952      0 --:--:-- --:--:-- --:--:-- 16400\r\ncurl: Failed writing body\r\n\r\n------------------------------------------------------------------------------\r\n\r\n\r\n==============================================================================\r\n Все тесты завершены!\r\n==============================================================================",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224",
    "stdin_id": "30de89f3-93d4-4881-9495-9c0f8698a6ed"
  },
  {
    "id": "3577fb08-108d-4c96-a622-f9f4e8a891ed",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T16:20:53.662Z",
    "type": "stdin",
    "executed_command": "nano test_curl.sh",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224"
  },
  {
    "id": "7297d534-a906-4db6-9280-97234ea63e92",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T16:21:37.364Z",
    "type": "stdin",
    "executed_command": "{HEADER_ACCEPT}\"",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224"
  },
  {
    "id": "9c4432e3-1776-4e05-bc52-8131ef576a77",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T16:21:40.676Z",
    "type": "stdin",
    "executed_command": "{HEADER_ACCEPT}\"",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224"
  },
  {
    "id": "56422657-9d6a-4b0d-bd5c-7d23f2a84bd6",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T16:22:08.553Z",
    "type": "stdin",
    "executed_command": "{HEADER_ACCEPT}\"",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224"
  },
  {
    "id": "06cffbca-d603-4459-9930-e0d23f94ef68",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T16:22:14.849Z",
    "type": "stdin",
    "executed_command": "{HEADER_ACCEPT}\"",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224"
  },
  {
    "id": "221b9eb7-0ca6-4c6e-9995-65137a4ae99f",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T16:22:14.859Z",
    "type": "stdout",
    "terminal_output": "bash ./test_curl.sh \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\bPnano test_curl.sh\r\n\r[ Reading... ][ Read 124 lines ]  GNU nano 7.2                                          test_curl.sh                                                    \r^G Help^O Write Out   ^W Where Is    ^K Cut^T Execute     ^C Location    M-U UndoM-A Set Mark\r^X Exit^R Read File   ^\\ Replace     ^U Paste^J Justify     ^/ Go To Line  M-E RedoM-6 Copy\r#!/bin/bash\r# ==============================================================================\r# CURL-тесты для REST API сервиса AI Analytics Interface\r#\b# Использование:\r# 1. Убедитесь, что сервер запущен: node server.js\r# 2. Запустите этот скрипт из терминала: bash ./tests/test_curl.sh\r# 3. Скрипт последовательно выполнит тесты и выведет результаты.\r# ==============================================================================\r# --- Конфигурация ---\r#BASE_URL=\"http://localhost:3002\"\rBASE_URL=\"http://192.168.1.254:3002\"\rHEADER_CONTENT_TYPE=\"Content-Type: application/json\"\rHEADER_ACCEPT=\"Accept: application/json\"\rPROMPT_NAME=\"test_prompt_$(date +%s)\" # Уникальное имя промпта для каждого запуска\r# --- Вспомогательные функции ---\rfunction print_header() {echo \"\"echo \"==============================================================================\"echo \" $1\"echo \"==============================================================================\"echo \"\"\r}\b*\r!/bin/bash \rPPinP\rnP\b\nfunction print_footer() {\r\necho \"\"\r\necho \"------------------------------------------------------------------------------\"\r\necho \"\"\r\n}\b\n\n# ==============================================================================\r\n# --- ТЕСТОВЫЙ СЦЕНАРИЙ ---\r\n# ==============================================================================\r\n\n# --- 1. Проверка состояния сервера и конфигурации ---\r\nprint_header \"1. Тесты состояния сервера и конфигурации\"\r\n\necho \"1.1. Запрос информации о сервере (GET /server-info)\"\r\ncurl -X GET \"${BASE_URL}/server-info\" -H \"${HEADER_ACCEPT}\" | jq .\r\nprint_footer\r\n\necho \"1.2. Запрос конфигурации API (GET /api/config)\"\r\ncurl -X GET \"${BASE_URL}/api/config\" -H \"${HEADER_ACCEPT}\" | jq .\r\nprint_footer\r\n\necho \"1.3. Запрос списка всех доступных моделей (GET /api/all-models)\"\r\ncurl -X GET \"${BASE_URL}/api/all-models\" -H \"${HEADER_ACCEPT}\" | jq '.[].name'\r\nprint_footer\r\n\n# --- 2. Тестирование CRUD операций для Промптов (/api/prompts) ---\r\nprint_header \"2. Тесты CRUD для Промптов\"\r\n\necho \"2.1. Создание нового промпта (POST /api/prompts)\"\r\ncurl -X POST \"${BASE_URL}/api/prompts\" \\\r\n-H \"${HEADER_CONTENT_TYPE}\" \\\r\n-d '{\r\n\"name\": \"'\"${PROMPT_NAME}\"'\",\r\n\"text\": \"Это тестовый системный промпт.\"\r\n}' | jq .\r\nprint_footer\r\n\necho \"2.2. Получение списка всех промптов для проверки (GET /api/prompts)\"\r\ncurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\" | jq '.[] | select(.name==\"'\"${PROMPT_NAME}\"'\")'\r\nprint_footer\r\n\necho \"2.3. Обновление промпта (PUT /api/prompts/:name)\"\r\ncurl -X PUT \"${BASE_URL}/api/prompts/${PROMPT_NAME}\" \\\r\n-H \"${HEADER_CONTENT_TYPE}\" \\\r\n-d '{\r\n\"text\": \"Это обновленный тестовый системный промпт.\"\r\n}' | jq .\r\nprint_footer\r\n\necho \"2.4. Повторное получение списка для проверки обновления\"\r\ncurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\" | jq '.[] | select(.name==\"'\"${PROMPT_NAME}\"'\")'\r\nprint_footer\r\n\necho \"2.5. Удаление промпта (DELETE /api/prompts/:name)\"\r\ncurl -X DELETE \"${BASE_URL}/api/prompts/${PROMPT_NAME}\" | jq .\r\nprint_footer\r\n\necho \"2.6. Финальная проверка списка промптов\"\r\ncurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\" | jq '.[] | select(.name==\"'\"${PROMPT_NAME}\"'\")'\r\necho \"(Ожидается пустой результат)\"\r\nprint_footer\r\n\n# --- 3. Тестирование основного эндпоинта отправки запроса к AI ---\r\nprint_header \"3. Тест отправки запроса к AI (/api/send-request)\"\r\n\necho \"3.1. Отправка простого запроса к модели Groq (POST /api/send-request)\"\r\ncurl -X POST \"${BASE_URL}/api/send-request\" \\\r\n-H \"${HEADER_CONTENT_TYPE}\" \\\r\n-d '{\r\n\"model\": \"llama3-8b-8192\",\r\n\"provider\": \"groq\",\r\n\"prompt\": \"You are a helpful assistant.\",\r\n\"inputText\": \"What is the capital of France? Answer in one word.\",\r\n\"saveResponse\": false\r\n}' | jq .\r\nprint_footer\r\n\n# --- 4. Тестирование истории ответов ---\r\nprint_header \"4. Тест истории ответов (/api/responses)\"\r\n\necho \"4.1. Получение последних 5 записей из истории (GET /api/responses)\"\r\necho \"(Должна содержать ответ из предыдущего теста)\"\r\ncurl -X GET \"${BASE_URL}/api/responses?limit=5\" -H \"${HEADER_ACCEPT}\" | jq .\r\nprint_footer\r\n\n# --- 5. Базовые тесты для RAG API ---\r\nprint_header \"5. Базовые тесты для RAG API\"\r\n\necho \"5.1. Получение списка контекстных кодов (GET /api/rag/context-codes)\"\r\ncurl -X GET \"${BASE_URL}/api/rag/context-codes\" -H \"${HEADER_ACCEPT}\" | jq .\r\nprint_footer\r\n\necho \"5.2. Получение списка документов (GET /api/rag/documents)\"\r\ncurl -X GET \"${BASE_URL}/api/rag/documents\" -H \"${HEADER_ACCEPT}\" | jq .\r\nprint_footer\r\n\n\nprint_header \"Все тесты завершены!\"\r\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[ Nothing was cut ]\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r# --- 5. Базовые тесты для RAG API ---\rprint_header \"5. Базовые тесты для RAG API\"\recho \"5.1. Получение списка контекстных кодов (GET /api/rag/context-codes)\"\rcurl -X GET \"${BASE_URL}/api/rag/context-codes\" -H \"${HEADER_ACCEPT}\"\rprint_footer\recho \"5.2. Получение списка документов (GET /api/rag/documents)\"\rcurl -X GET \"${BASE_URL}/api/rag/documents\" -H \"${HEADER_ACCEPT}\"\rprint_footer\rprint_header \"Все тесты завершены!\"\r# --- 3. Тестирование основного эндпоинта отправки запроса к AI ---\rprint_header \"3. Тест отправки запроса к AI (/api/send-request)\"\recho \"3.1. Отправка простого запроса к модели Groq (POST /api/send-request)\"\rcurl -X POST \"${BASE_URL}/api/send-request\" \\\r-H \"${HEADER_CONTENT_TYPE}\" \\\r-d '{\r    \"model\": \"llama3-8b-8192\",\r    \"provider\": \"groq\",\"prompt\": \"You are a helpful assistant.\",\"inputText\": \"What is the capital of France? Answer in one word.\",\r    \"saveResponse\": false\r}'\rprint_footer\r# --- 4. Тестирование истории ответов ---\rprint_header \"4. Тест истории ответов (/api/responses)\"\recho \"4.1. Получение последних 5 записей из истории (GET /api/responses)\"\recho \"(Должна содержать ответ из предыдущего теста)\"\rcurl -X GET \"${BASE_URL}/api/responses?limit=5\" -H \"${HEADER_ACCEPT}\"\rprint_footer\r# --- 5. Базовые тесты для RAG API ---\rprint_header \"5. Базовые тесты для RAG API\"\recho \"2.2. Получение списка всех промптов для проверки (GET /api/prompts)\"\rcurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\"footer2.3. Обновление промпта (PUT /api/prompts/:name)\"UT \"${BASE_URL}/api/prompts/${PROMPT_NAME}\" \\text\": \"Это обновленный тестовый системный промпт.\"\r}'\rprint_footer\recho \"2.4. Повторное получение списка для проверки обновления\"\rcurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\"\recho \"2.5. Удаление промпта (DELETE /api/prompts/:name)\"\rcurl -X DELETE \"${BASE_URL}/api/prompts/${PROMPT_NAME}\rprint_footer\r2.6. Финальная проверка списка промптов\"promptsP\recho \"(Ожидается пустой результат для тестового промпта)\"\rprint_footer\r# --- 3. Тестирование основного эндпоинта отправки запроса к AI ---\r1.1. Запрос информации о сервере (GET /server-info)\"server-info1.2. Запрос конфигурации API (GET /api/config)\"GEconfig\" -H \"${HEADER_ACCEPT}\"\rprint_footer\recho \"1.3. Запрос списка всех доступных моделей (GET /api/all-models)\"\rcurl -X GET \"${BASE_URL}/api/all-models\" -H \"${HEADER_ACCEPT}\"\r# --- 2. Тестирование CRUD операций для Промптов (/api/prompts) ---\rprint_header \"2. Тесты CRUD для Промптов\"\recho \"2.1. Создание нового промпта (POST /api/prompts)\"\rcurl -X POST \"${BASE_URL}/api/prompts\" \\\r-H \"${HEADER_CONTENT_TYPE}\" \\\r-d '{\b\"name\": \"'\"${PROMPT_NAME}\"'\",\r    \"text\": \"Это тестовый системный промпт.\"\r}'\rprint_footer\recho \"2.2. Получение списка всех промптов для проверки (GET /api/prompts)\"\rcurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\"\rPROMPT_NAME=\"test_prompt_$(date +%s)\" # Уникальное имя промпта для каждого запуска\r# --- Вспомогательные функции ---\rfunction print_header() {\r    echo \"\"\r    echo \"==============================================================================\"\r    echo \" $1\"echo \"==============================================================================\"\r    echo \"\"\r}\bfunction print_footer() {\r    echo \"\"\r    echo \"------------------------------------------------------------------------------\"echo \"\"\r}\b# ==============================================================================\r# --- ТЕСТОВЫЙ СЦЕНАРИЙ ---\r# ==============================================================================\r# --- 1. Проверка состояния сервера и конфигурации ---header \"1. Тесты состояния сервера и конфигурации\"1.1. Запрос информации о сервере (GET /server-info)\"server-info\r#!/bin/bash\r# ==============================================================================CURL-тесты для REST API сервиса AI Analytics Interface\r#\b# Использование:\r# 1. Убедитесь, что сервер запущен: node server.js\r# 2. Запустите этот скрипт из терминала: bash ./tests/test_curl.sh\r# 3. Скрипт последовательно выполнит тесты и выведет результаты.\r# ==============================================================================\r \b# --- Конфигурация ---\rBASE_URL=\"http://192.168.1.254:3002\"\rHEADER_CONTENT_TYPE=\"Content-Type: application/json\"\rHEADER_ACCEPT=\"Accept: application/json\"\rPROMPT_NAME=\"test_prompt_$(date +%s)\" # Уникальное имя промпта для каждого запуска\r \b# --- Вспомогательные функции ---\rfunction print_header() {\r    echo \"\"\r    echo \"==============================================================================\"echo \" $1\"\r    echo \"==============================================================================\"\r    echo \"\"\r}\bfunction print_footer() {\r\necho \"\"\r\necho \"------------------------------------------------------------------------------\"\r\necho \"\"\r\n}\b\n\n# ==============================================================================\r\n# --- ТЕСТОВЫЙ СЦЕНАРИЙ ---\r\n# ==============================================================================\r\n\n# --- 1. Проверка состояния сервера и конфигурации ---\r\nprint_header \"1. Тесты состояния сервера и конфигурации\"\r\n\necho \"1.1. Запрос информации о сервере (GET /server-info)\"\r\ncurl -X GET \"${BASE_URL}/server-info\" -H \"${HEADER_ACCEPT}\"\r\nprint_footer\r\n\necho \"1.2. Запрос конфигурации API (GET /api/config)\"\r\ncurl -X GET \"${BASE_URL}/api/config\" -H \"${HEADER_ACCEPT}\"\r\nprint_footer\r\n\necho \"1.3. Запрос списка всех доступных моделей (GET /api/all-models)\"\r\ncurl -X GET \"${BASE_URL}/api/all-models\" -H \"${HEADER_ACCEPT}\"\r\nprint_footer\r\n\n# --- 2. Тестирование CRUD операций для Промптов (/api/prompts) ---\r\nprint_header \"2. Тесты CRUD для Промптов\"\r\n\necho \"2.1. Создание нового промпта (POST /api/prompts)\"\r\ncurl -X POST \"${BASE_URL}/api/prompts\" \\\r\n-H \"${HEADER_CONTENT_TYPE}\" \\\r\n-d '{\r\n\"name\": \"'\"${PROMPT_NAME}\"'\",\r\n\"text\": \"Это тестовый системный промпт.\"\r\n}'\r\nprint_footer\r\n\necho \"2.2. Получение списка всех промптов для проверки (GET /api/prompts)\"\r\ncurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\"\r\nprint_footer\r\n\necho \"2.3. Обновление промпта (PUT /api/prompts/:name)\"\rSave modified buffer?                                                                                                    Y Yes\r N No   ^C Cancel\u0007\u0007\u0007\u0007\u0007\r                                                     [ Cancelled ]\r^G Help^O Write Out   ^W Where Is    ^K Cut^T Execute     ^C Location    M-U UndoM-A Set Mark\r^X Exit^R Read File   ^\\ Replace     ^U Paste^J Justify     ^/ Go To Line  M-E RedoM-6 Copy\rfunction print_header() {\r    echo \"\"\r    echo \"==============================================================================\"\r    echo \" $1\"echo \"==============================================================================\"\r    echo \"\"\r}\bfunction print_footer() {\r    echo \"\"\r    echo \"------------------------------------------------------------------------------\"echo \"\"\r}\b# ==============================================================================\r# --- ТЕСТОВЫЙ СЦЕНАРИЙ ---\r# ==============================================================================\r# --- 1. Проверка состояния сервера и конфигурации ---header \"1. Тесты состояния сервера и конфигурации\"1.1. Запрос информации о сервере (GET /server-info)\"server-info1.2. Запрос конфигурации API (GET /api/config)\"\rнecho \"1.2. Запрос конфигурации API (GET /api/config)\"\r\bechoP\recho \"1.2. Запрос конфигурации API (GET /api/config)\"\rcurl -X GET \"${BASE_URL}/api/config\" -H \"${HEADER_ACCEPT}\"\recho \"1.2. Запрос конфигурации API (GET /api/config)\"\rcurl -X GET \"${BASE_URL}/api/config\" -H \"${HEADER_ACCEPT}\"\rprint_footer\n\necho \"1.3. Запрос списка всех доступных моделей (GET /api/all-models)\"\ncurl -X GET \"${BASE_URL}/api/all-models\" -H \"${HEADER_ACCEPT}\"\nprint_footer\n\n# --- 2. Тестирование CRUD операций для Промптов (/api/prompts) ---\nprint_header \"2. Тесты CRUD для Промптов\"\n\necho \"2.1. Создание нового промпта (POST /api/prompts)\"\r\ncurl -X POST \"${BASE_URL}/api/prompts\" \\\n-H \"${HEADER_CONTENT_TYPE}\" \\\n-d '{\n\"name\": \"'\"${PROMPT_NAME}\"'\",\n\"text\": \"Это тестовый системный промпт.\"\n}'\nprint_footer\n\necho \"2.2. Получение списка всех промптов для проверки (GET /api/prompts)\"\ncurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\"\nprint_footer\n\necho \"2.3. Обновление промпта (PUT /api/prompts/:name)\"\ncurl -X PUT \"${BASE_URL}/api/prompts/${PROMPT_NAME}\" \\\n-H \"${HEADER_CONTENT_TYPE}\" \\\n-d '{\n\"text\": \"Это обновленный тестовый системный промпт.\"\n}'",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224",
    "stdin_id": "06cffbca-d603-4459-9930-e0d23f94ef68"
  },
  {
    "id": "10ffd839-cc43-48f9-a432-083e28aaa783",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T16:22:16.473Z",
    "type": "stdin",
    "executed_command": "nano test_curl.sh",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224"
  },
  {
    "id": "b376bef6-a5b8-4af2-a785-36603d5cb535",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T16:22:28.348Z",
    "type": "stdout",
    "terminal_output": "nano test_curl.sh\r\n\r[ Reading... ][ Read 121 lines ]  GNU nano 7.2                                          test_curl.sh                                                    \r^G Help^O Write Out   ^W Where Is    ^K Cut^T Execute     ^C Location    M-U UndoM-A Set Mark\r^X Exit^R Read File   ^\\ Replace     ^U Paste^J Justify     ^/ Go To Line  M-E RedoM-6 Copy\r#!/bin/bash\r# ==============================================================================\r# CURL-тесты для REST API сервиса AI Analytics Interface\r#\b# Использование:\r# 1. Убедитесь, что сервер запущен: node server.js\r# 2. Запустите этот скрипт из терминала: bash ./tests/test_curl.sh\r# 3. Скрипт последовательно выполнит тесты и выведет результаты.\r# ==============================================================================\r# --- Конфигурация ---\rBASE_URL=\"http://192.168.1.254:3002\"\rHEADER_CONTENT_TYPE=\"Content-Type: application/json\"\rHEADER_ACCEPT=\"Accept: application/json\"\rPROMPT_NAME=\"test_prompt_$(date +%s)\" # Уникальное имя промпта для каждого запуска\r# --- Вспомогательные функции ---\rfunction print_header() {echo \"\"echo \"==============================================================================\"echo \" $1\"echo \"==============================================================================\"echo \"\"\r}\bfunction print_footer() {\r\r\necho \"\"\r\necho \"------------------------------------------------------------------------------\"\r\necho \"\"\r\n}\b\n\n# ==============================================================================\r\n# --- ТЕСТОВЫЙ СЦЕНАРИЙ ---\r\n# ==============================================================================\r\n\n# --- 1. Проверка состояния сервера и конфигурации ---\r\nprint_header \"1. Тесты состояния сервера и конфигурации\"\r\n\necho \"1.1. Запрос информации о сервере (GET /server-info)\"\r\ncurl -X GET \"${BASE_URL}/server-info\" -H \"${HEADER_ACCEPT}\"\r\nprint_footerecho \"1.2. Запрос конфигурации API (GET /api/config)\"\r\ncurl -X GET \"${BASE_URL}/api/config\" -H \"${HEADER_ACCEPT}\"\r\nprint_footer\r\n\necho \"1.3. Запрос списка всех доступных моделей (GET /api/all-models)\"\r\ncurl -X GET \"${BASE_URL}/api/all-models\" -H \"${HEADER_ACCEPT}\"\r\nprint_footer\r\n\n# --- 2. Тестирование CRUD операций для Промптов (/api/prompts) ---\r\nprint_header \"2. Тесты CRUD для Промптов\"\r\n\necho \"2.1. Создание нового промпта (POST /api/prompts)\"\r\ncurl -X POST \"${BASE_URL}/api/prompts\" \\\r\n-H \"${HEADER_CONTENT_TYPE}\" \\\r\n-d '{\r\n\"name\": \"'\"${PROMPT_NAME}\"'\",\r\n\"text\": \"Это тестовый системный промпт.\"\r\n}'\r\nprint_footer\r\n\necho \"2.2. Получение списка всех промптов для проверки (GET /api/prompts)\"\r\ncurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\"\r\nprint_footer\r\n\necho \"2.3. Обновление промпта (PUT /api/prompts/:name)\"\r\ncurl -X PUT \"${BASE_URL}/api/prompts/${PROMPT_NAME}\" \\\r\n-H \"${HEADER_CONTENT_TYPE}\" \\\r\n-d '{\r\n\"text\": \"Это обновленный тестовый системный промпт.\"\r\n}'\r\nprint_footer\r\n\necho \"2.4. Повторное получение списка для проверки обновления\"\r\ncurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\"\r\nprint_footer\r\n\necho \"2.5. Удаление промпта (DELETE /api/prompts/:name)\"\r\ncurl -X DELETE \"${BASE_URL}/api/prompts/${PROMPT_NAME}\"\r\nprint_footer\r\n\necho \"2.6. Финальная проверка списка промптов\"\r\ncurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\"\r\necho \"(Ожидается пустой результат для тестового промпта)\"\r\nprint_footer\r\n\n# --- 3. Тестирование основного эндпоинта отправки запроса к AI ---\r\nprint_header \"3. Тест отправки запроса к AI (/api/send-request)\"\r\n\necho \"3.1. Отправка простого запроса к модели Groq (POST /api/send-request)\"\r\ncurl -X POST \"${BASE_URL}/api/send-request\" \\\r\n-H \"${HEADER_CONTENT_TYPE}\" \\\r\n-d '{\r\n\"model\": \"llama3-8b-8192\",\r\n\"provider\": \"groq\",\r\n\"prompt\": \"You are a helpful assistant.\",\r\n\"inputText\": \"What is the capital of France? Answer in one word.\",\r\n\"saveResponse\": false\r\n}'\r\nprint_footer\r\n\n# --- 4. Тестирование истории ответов ---\r\nprint_header \"4. Тест истории ответов (/api/responses)\"\r\n\necho \"4.1. Получение последних 5 записей из истории (GET /api/responses)\"\r\necho \"(Должна содержать ответ из предыдущего теста)\"\r\ncurl -X GET \"${BASE_URL}/api/responses?limit=5\" -H \"${HEADER_ACCEPT}\"\r\nprint_footer\r\n\n# --- 5. Базовые тесты для RAG API ---\r\nprint_header \"5. Базовые тесты для RAG API\"\r\n\necho \"5.1. Получение списка контекстных кодов (GET /api/rag/context-codes)\"\r\ncurl -X GET \"${BASE_URL}/api/rag/context-codes\" -H \"${HEADER_ACCEPT}\"\r\nprint_footer\r\n\necho \"5.2. Получение списка документов (GET /api/rag/documents)\"\r\ncurl -X GET \"${BASE_URL}/api/rag/documents\" -H \"${HEADER_ACCEPT}\"\r\nprint_footer\r\n\n\nprint_header \"Все тесты завершены!\"",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224",
    "stdin_id": "10ffd839-cc43-48f9-a432-083e28aaa783"
  },
  {
    "id": "c3d1df4e-0341-4898-b63b-63e4ef585490",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T16:22:31.887Z",
    "type": "stdin",
    "executed_command": "bash ./test_curl.sh",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224"
  },
  {
    "id": "883a9d62-0410-4dc1-8f0c-47cc90aaf69d",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T16:22:32.074Z",
    "type": "stdout",
    "terminal_output": "nano test_curl.sh\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\bbash ./test_curl.sh \r\n\r\r\n==============================================================================\r\n 1. Тесты состояния сервера и конфигурации\r\n==============================================================================\r\n\r\n1.1. Запрос информации о сервере (GET /server-info)\r\n{\"hostname\":\"DESKTOP-QBT4OQT\",\"platform\":\"win32\",\"arch\":\"x64\",\"nodeVersion\":\"v20.16.0\",\"uptime\":6656313.687,\"baseUrl\":\"http://192.168.1.254:3002\",\"port\":\"3002\",\"appName\":\"AI Analytics Interface\",\"timestamp\":\"2025-09-02T16:22:31.895Z\"}./test_curl.sh: line 41: print_footerecho: command not found\r\n{\"server\":{\"port\":\"3002\",\"nodeEnv\":\"development\",\"isTestMode\":false},\"n8n\":{},\"apiKey\":\"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\",\"groqKey\":\"***\",\"providers\":{\"openroute\":true,\"groq\":true},\"logging\":{\"level\":\"info\",\"filename\":\"combined.log\",\"errorFilename\":\"error.log\"},\"langchainPg\":{\"baseUrl\":\"http://localhost:3005\",\"enabled\":true}}\r\n------------------------------------------------------------------------------\r\n\r\n1.3. Запрос списка всех доступных моделей (GET /api/all-models)\r\n[{\"name\":\"openai/gpt-oss-20b\",\"visible_name\":\"🚀 GROQ: GPT OSS 20B\",\"provider\":\"groq\",\"context\":131072,\"fast\":true,\"max_output_tokens\":65536,\"input_cost\":0.1,\"output_cost\":0.5,\"showInApi\":true,\"use_in_ui\":true},{\"name\":\"openai/gpt-oss-120b\",\"visible_name\":\"🚀 GROQ: GPT OSS 120B\",\"provider\":\"groq\",\"context\":131072,\"fast\":true,\"max_output_tokens\":65536,\"input_cost\":0.15,\"output_cost\":0.75,\"showInApi\":true,\"use_in_ui\":true},{\"name\":\"llama-3.3-70b-versatile\",\"visible_name\":\"🚀 GROQ: Llama 3.3 70B (Versatile)\",\"provider\":\"groq\",\"context\":8192,\"fast\":true,\"showInApi\":true,\"use_in_ui\":true},{\"name\":\"llama3-8b-8192\",\"visible_name\":\"🚀 GROQ: Llama 3 8B\",\"provider\":\"groq\",\"context\":8192,\"fast\":true,\"showInApi\":true,\"use_in_ui\":true},{\"name\":\"llama3-70b-8192\",\"visible_name\":\"🚀 GROQ: Llama 3 70B\",\"provider\":\"groq\",\"context\":8192,\"fast\":true,\"showInApi\":true,\"use_in_ui\":true},{\"name\":\"mixtral-8x7b-32768\",\"visible_name\":\"🚀 GROQ: Mixtral 8x7B\",\"provider\":\"groq\",\"context\":32768,\"fast\":true,\"showInApi\":true,\"use_in_ui\":true},{\"name\":\"gemma2-9b-it\",\"visible_name\":\"🚀 GROQ: Gemma 2 9B\",\"provider\":\"groq\",\"context\":8192,\"fast\":true,\"showInApi\":true,\"use_in_ui\":true},{\"name\":\"moonshotai/kimi-dev-72b:free\",\"showInApi\":true,\"visible_name\":\"Ок - moonshotai/kimi-dev-72b:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"moonshotai/kimi-k2:free\",\"showInApi\":true,\"visible_name\":\"Ок! moonshotai/kimi-k2:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"mistralai/mistral-small-3.2-24b-instruct:free\",\"showInApi\":true,\"visible_name\":\"Ok! mistralai/mistral-small-3.2-24b-instruct:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"google/gemini-2.5-pro-exp-03-25\",\"showInApi\":true,\"visible_name\":\"-- google/gemini-2.5-pro-exp-03-25\",\"use_in_ui\":false,\"provider\":\"openroute\"},{\"name\":\"google/gemma-3-27b-it:free\",\"showInApi\":true,\"visible_name\":\"ОК! gemma-3-27b-it:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"google/gemini-2.0-flash-exp:free\",\"showInApi\":true,\"visible_name\":\"google/gemini-2.0-flash-exp:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"google/gemini-2.0-flash-lite-preview-02-05:free\",\"showInApi\":true,\"visible_name\":\"google/gemini-2.0-flash-lite-preview-02-05:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"google/gemini-2.0-flash-thinking-exp-1219:free\",\"showInApi\":true,\"visible_name\":\"google/gemini-2.0-flash-thinking-exp-1219:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"google/gemini-2.0-pro-exp-02-05:free\",\"showInApi\":true,\"visible_name\":\"google/gemini-2.0-pro-exp-02-05:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"google/gemini-2.0-flash-thinking-exp:free\",\"showInApi\":true,\"visible_name\":\"google/gemini-2.0-flash-thinking-exp:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"deepseek/deepseek-chat:free\",\"showInApi\":true,\"visible_name\":\"Ok! deepseek/deepseek-chat:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"deepseek/deepseek-r1-zero:free\",\"showInApi\":true,\"visible_name\":\"deepseek/deepseek-r1-zero:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"deepseek/deepseek-r1-distill-llama-70b:free\",\"showInApi\":true,\"visible_name\":\"deepseek/deepseek-r1-distill-llama-70b:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"deepseek/deepseek-r1:free\",\"showInApi\":true,\"visible_name\":\"deepseek/deepseek-r1:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"qwen/qwq-32b:free\",\"showInApi\":true,\"visible_name\":\"ОК! qwen/qwq-32b:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"qwen/qwen2.5-vl-72b-instruct:free\",\"showInApi\":true,\"visible_name\":\"qwen/qwen2.5-vl-72b-instruct:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"moonshotai/moonlight-16b-a3b-instruct:free\",\"showInApi\":true,\"visible_name\":\"moonshotai/moonlight-16b-a3b-instruct:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"nousresearch/deephermes-3-llama-3-8b-preview:free\",\"showInApi\":true,\"visible_name\":\"nousresearch/deephermes-3-llama-3-8b-preview:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"cognitivecomputations/dolphin3.0-r1-mistral-24b:free\",\"showInApi\":true,\"visible_name\":\"cognitivecomputations/dolphin3.0-r1-mistral-24b:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"cognitivecomputations/dolphin3.0-mistral-24b:free\",\"showInApi\":true,\"visible_name\":\"cognitivecomputations/dolphin3.0-mistral-24b:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"sophosympatheia/rogue-rose-103b-v0.2:free\",\"showInApi\":true,\"visible_name\":\"sophosympatheia/rogue-rose-103b-v0.2:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"qwen/qwen-2.5-coder-32b-instruct:free\",\"showInApi\":true,\"visible_name\":\"qwen/qwen-2.5-coder-32b-instruct:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"nvidia/llama-3.1-nemotron-70b-instruct:free\",\"showInApi\":true,\"visible_name\":\"nvidia/llama-3.1-nemotron-70b-instruct:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"gryphe/mythomax-l2-13b:free\",\"showInApi\":true,\"visible_name\":\"gryphe/mythomax-l2-13b:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"google/gemini-2.5-pro-exp-03-25\",\"showInApi\":false,\"visible_name\":\"google/gemini-2.5-pro-exp-03-25\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"(self-moderated) anthropic/claude-3.7-sonnet:beta\",\"showInApi\":false,\"visible_name\":\"(self-moderated) anthropic/claude-3.7-sonnet:beta\",\"use_in_ui\":true,\"provider\":\"openroute\"}]\r\n------------------------------------------------------------------------------\r\n\r\n\r\n==============================================================================\r\n 2. Тесты CRUD для Промптов\r\n==============================================================================\r\n\r\n2.1. Создание нового промпта (POST /api/prompts)\r\n{\"message\":\"Prompt added successfully\"}\r\n------------------------------------------------------------------------------\r\n\r\n2.2. Получение списка всех промптов для проверки (GET /api/prompts)\r\n[{\"name\":\"task  Задание для обработки команд управления задачами\",\"text\":\"# Задание для обработки команд управления задачами\\n\\n## Доступные команды\\n1. Вывести список задач\\n   - ID команды: 1\\n   - Параметры: нет\\n\\n2. Создать задачу\\n   - ID команды: 2\\n   - Параметры: task_name (название задачи)\\n\\n3. Закрыть задачу\\n   - ID команды: 3\\n   - Параметры: task_name (название задачи)\\n\\n## Формат ответа\\nВаша задача - проанализировать входной текст пользователя и определить:\\n- Какая команда запрашивается (id_cmd)\\n- Какие параметры предоставлены (task_name, если применимо)\\n\\nОтвет должен быть представлен в формате JSON со следующей структурой:\\n\\n{\\n    \\\"id_cmd\\\": <номер команды>,\\n    \\\"task_name\\\": \\\"<название задачи>\\\" // только для команд 2 и 3\\n}\\n\\n### Требования\\n1. Выходной текст должен быть чистым текстом в формате JSON.\\n2. Не используй Markdown-разметку (никаких json , ``, **, * и т.д.).\\n3. Вывод должен быть строго в формате JSON, без дополнительных символов или комментариев.\\n4. Входные строки начинающиеся с трех тире(---) считаем коментириями, их не анализируем как команду.\\n\\n\\n## Примеры\\n\\n### Пример 1\\nВходной текст: \\\"Добавь задачу - Сходить в магазин\\\"\\nОтвет:\\n{\\n    \\\"id_cmd\\\": 2,\\n    \\\"task_name\\\": \\\"Сходить в магазин\\\"\\n}\\n\\n### Пример 2\\nВходной текст: \\\"Покажи список задач\\\"\\nОтвет:\\n{\\n    \\\"id_cmd\\\": 1\\n}\"},{\"name\":\"pm2\",\"text\":\"Ты — AI-помощник для работы с PM2. Твоя задача — превращать человеческие запросы в корректные команды PM2.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<команда PM2>\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи статус\\nОтвет:\\n# Ваш запрос: Покажи статус  \\npm2 status\\n\\nЗапрос:\\nПокажи мне логи задания test_https\\nОтвет:\\n# Ваш запрос: Покажи мне логи задания test_https  \\npm2 logs test_https\\n\\nЗапрос:\\nПерезапусти процесс api_server\\nОтвет:\\n# Ваш запрос: Перезапусти процесс api_server  \\npm2 restart api_server\\n\\nЗапрос:\\nОстанови все процессы\\nОтвет:\\n# Ваш запрос: Останови все процессы  \\npm2 stop all\\n\\nЗапрос:\\nДобавь процесс my_app с файлом server.js\\nОтвет:\\n# Ваш запрос: Добавь процесс my_app с файлом server.js  \\npm2 start server.js --name my_app\\n\\nЗапрос:\\nУдали процесс worker\\nОтвет:\\n# Ваш запрос: Удали процесс worker  \\npm2 delete worker\\n\\nПравила:\\n\\nВсегда возвращай только одну команду.\\nЕсли запрос неясен, предложи уточняющий вариант команды.\\nЕсли пользователь спрашивает про справку, используй pm2 -h.\\nЕсли запрос не относится к PM2, напиши \\\"command unknown\\\".\\nНе используй Markdown-разметку (никаких json , ``, **, * и т.д.).\\nВывод должен быть строго в формате JSON, без дополнитель��ых символов или комментариев.\\nВходные строки начинающиеся с трех тире(---) считаем коментириями, их не анализируем как команду.\"},{\"name\":\"Linux Команды\",\"text\":\"Ты — AI-помощник для работы с Linux. Твоя задача — превращать человеческие запросы в корректные команды linux.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<команда linux>\\n\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи содержимое директории\\nОтвет:\\n# Ваш запрос: Покажи содержимое директории  \\nls -la\\n\\nПравила:\\n\\nВсегда возвращай только одну команду.\\nЕсли запрос неясен, предложи уточняющий вариант команды.\\nЕсли пользователь спрашивает про справку, используй pm2 -h.\\nЕсли запрос не относится к PM2, напиши \\\"command unknown\\\".\\nНе используй Markdown-разметку (никаких json , ``, **, * и т.д.).\\nВывод должен быть строго в формате JSON, без дополнительных символов или комментариев.\\nВходные строки начинающиеся с трех тире(---) считаем коментириями, их не анализируем как команду.\"},{\"name\":\"Linux: Просто помошник .\",\"text\":\"Ты — AI-помощник для работы с Linux.\"},{\"name\":\"Пустой sys промпт\",\"text\":\"1\"},{\"name\":\"Разработчик Postgresql\",\"text\":\"ТЫ крутой разработчик на Postgresql.\"},{\"name\":\"Системный Аналитик и коллега\",\"text\":\"Выступай в роли Системного Аналитика в области IT, с навыками разработки систем на NodeJs и Javascript? а так же и как мой коллега. Давай обсудим некоторые мои идеи. Жду от тебя аопросов и конструктивной критики. Какие положительные моменты ты видишь, а какие недостатки. Вместе мы должны решить, стоит ли развивать идею или нет.\"},{\"name\":\"docker\",\"text\":\"Ты — AI-помощник для работы с docker. Твоя задача — превращать человеческие запросы в корректные команды docker.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<команда PM2>\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи выполняющиеся образы\\nОтвет:\\n# Ваш запрос: Покажи выполняющиеся образы\\ndockerps\"},{\"name\":\"Опытный разработчик NodeJs Javascript\",\"text\":\"Ты опытный разработчик NodeJs Javascript.\"},{\"name\":\"Просто для болтовни\",\"text\":\".\"},{\"name\":\"Простое приложение NodeJs.\",\"text\":\"Ты опытный разработчик NodeJs Javascript.\\nСоздай простое приложение с сервером server.js и интерфейсом пользователя на чистой Javascript.\"},{\"name\":\"tmp_prompt\",\"text\":\"Always answer \\\"no\\\"\"},{\"name\":\"PostgreSQL команд\",\"text\":\"Ты — AI-помощник для работы с PostgreSQL. Твоя задача — превращать человеческие запросы в корректные запросы PostgreSQL. Запросы о структуре  объектов БД нужно брать из information_schema.\\n\\nДля запроса структуры объектов Нужно сформировать ответ так, чтобы резуль��ат был в виде sql команды CREATE ... \\nУчитывай схему в которой объект.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<запрос в БД PostgreSQL>\\n\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи структуру таблицы auction .\\n\\nОтвет:\\nSELECT\\n    'CREATE TABLE carl_data.auction (' AS create_table_stmt\\nUNION ALL\\nSELECT\\n    string_agg(\\n            column_definition,\\n            ', '\\n    )\\nFROM (\\n    SELECT\\n        column_name || ' ' ||\\n        data_type ||\\n        COALESCE('(' || character_maximum_length || ')', '') ||\\n        CASE\\n            WHEN is_nullable = 'NO' THEN ' NOT NULL'\\n            ELSE ''\\n            END ||\\n        COALESCE(' DEFAULT ' || column_default, '') AS column_definition\\n    FROM\\n        information_schema.columns\\n    WHERE\\n        table_name = 'auction'\\n            AND table_schema = 'carl_data'\\n    ORDER BY\\n        ordinal_position\\n) AS columns\\nUNION ALL\\nSELECT\\n    ');';\"},{\"name\":\"Obsidian\",\"text\":\"Нужны советы по Obsidian\"},{\"name\":\"Объясни логику PLPGSQL функции\",\"text\":\"Ты опытный разработчик на Postgresql, SQL, PLPGSQL.\\nОбъясни логику функции приведенной нижею Если есть вопросы - задавай.\\n\\n--- Текст функции:\"},{\"name\":\"Автомобили.\",\"text\":\"Автомобили.\\n\\nКакаие популярные марки грузовых автомобилей ты знаешь?\\nВыведи только список названий всех. Только названия без любой дополнительной информации.\"},{\"name\":\"Автомобили. марки легковых. json\",\"text\":\"Автомобили. марки легковых. json \\n\\nКакаие популярные марки легковых автомобилей ты знаешь?\\nВыведи только список ��азваний марок желательно всех, которые известны. Только названия без любой дополнительной информации. В виде json  [{ \\\"mark\\\":\\\"Volvo\\\" }, {} ]\"},{\"name\":\"test_prompt_1756830151\",\"text\":\"Это тестовый системный промпт.\"}]\r\n------------------------------------------------------------------------------\r\n\r\n2.3. Обновление промпта (PUT /api/prompts/:name)\r\n{\"message\":\"Prompt updated successfully\"}\r\n------------------------------------------------------------------------------\r\n\r\n2.4. Повторное получение списка для проверки обновления\r\n[{\"name\":\"task  Задание для обработки команд управления задачами\",\"text\":\"# Задание для обработки команд управления задачами\\n\\n## Доступные команды\\n1. Вывести список задач\\n   - ID команды: 1\\n   - Параметры: нет\\n\\n2. Создать задачу\\n   - ID команды: 2\\n   - Параметры: task_name (название задачи)\\n\\n3. Закрыть задачу\\n   - ID команды: 3\\n   - Параметры: task_name (название задачи)\\n\\n## Формат ответа\\nВаша задача - проанализировать входной текст пользователя и определить:\\n- Какая команда запрашивается (id_cmd)\\n- Какие параметры предоставлены (task_name, если применимо)\\n\\nОтвет должен быть представлен в формате JSON со следующей структурой:\\n\\n{\\n    \\\"id_cmd\\\": <номер команды>,\\n    \\\"task_name\\\": \\\"<название задачи>\\\" // только для команд 2 и 3\\n}\\n\\n### Требования\\n1. Выходной текст должен быть чистым текстом в формате JSON.\\n2. Не используй Markdown-разметку (никаких json , ``, **, * и т.д.).\\n3. Вывод должен быть строго в формате JSON, без дополнительных символов или комментариев.\\n4. Входные строки начинающиеся с трех тире(---) считаем коментириями, их не анализируем как команду.\\n\\n\\n## Примеры\\n\\n### Пример 1\\nВходной текст: \\\"Добавь задачу - Сходить в магазин\\\"\\nОтвет:\\n{\\n    \\\"id_cmd\\\": 2,\\n    \\\"task_name\\\": \\\"Сходить в магазин\\\"\\n}\\n\\n### Пример 2\\nВходной текст: \\\"Покажи список задач\\\"\\nОтвет:\\n{\\n    \\\"id_cmd\\\": 1\\n}\"},{\"name\":\"pm2\",\"text\":\"Ты — AI-помощник для работы с PM2. Твоя задача — превращать человеческие запросы в корректные команды PM2.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<команда PM2>\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи статус\\nОтвет:\\n# Ваш запрос: Покажи статус  \\npm2 status\\n\\nЗапрос:\\nПокажи мне логи задания test_https\\nОтвет:\\n# Ваш запрос: Покажи мне логи задания test_https  \\npm2 logs test_https\\n\\nЗапрос:\\nПерезапусти процесс api_server\\nОтвет:\\n# Ваш запрос: Перезапусти процесс api_server  \\npm2 restart api_server\\n\\nЗапрос:\\nОстанови все процессы\\nОтвет:\\n# Ваш запрос: Останови все процессы  \\npm2 stop all\\n\\nЗапрос:\\nДобавь процесс my_app с файлом server.js\\nОтвет:\\n# Ваш запрос: Добавь процесс my_app с файлом server.js  \\npm2 start server.js --name my_app\\n\\nЗапрос:\\nУдали процесс worker\\nОтвет:\\n# Ваш запрос: Удали процесс worker  \\npm2 delete worker\\n\\nПравила:\\n\\nВсегда возвращай только одну команду.\\nЕсли запрос неясен, предложи уточняющий вариант команды.\\nЕсли пользователь спрашивает про справку, используй pm2 -h.\\nЕсли запрос не относится к PM2, напиши \\\"command unknown\\\".\\nНе используй Markdown-разметку (никаких json , ``, **, * и т.д.).\\nВывод должен быть строго в формате JSON, без дополнитель��ых символов или комментариев.\\nВходные строки начинающиеся с трех тире(---) считаем коментириями, их не анализируем как команду.\"},{\"name\":\"Linux Команды\",\"text\":\"Ты — AI-помощник для работы с Linux. Твоя задача — превращать человеческие запросы в корректные команды linux.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<команда linux>\\n\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи содержимое директории\\nОтвет:\\n# Ваш запрос: Покажи содержимое директории  \\nls -la\\n\\nПравила:\\n\\nВсегда возвращай только одну команду.\\nЕсли запрос неясен, предложи уточняющий вариант команды.\\nЕсли пользователь спрашивает про справку, используй pm2 -h.\\nЕсли запрос не относится к PM2, напиши \\\"command unknown\\\".\\nНе используй Markdown-разметку (никаких json , ``, **, * и т.д.).\\nВывод должен быть строго в формате JSON, без дополнительных символов или комментариев.\\nВходные строки начинающиеся с трех тире(---) считаем коментириями, их не анализируем как команду.\"},{\"name\":\"Linux: Просто помошник .\",\"text\":\"Ты — AI-помощник для работы с Linux.\"},{\"name\":\"Пустой sys промпт\",\"text\":\"1\"},{\"name\":\"Разработчик Postgresql\",\"text\":\"ТЫ крутой разработчик на Postgresql.\"},{\"name\":\"Системный Аналитик и коллега\",\"text\":\"Выступай в роли Системного Аналитика в области IT, с навыками разработки систем на NodeJs и Javascript? а так же и как мой коллега. Давай обсудим некоторые мои идеи. Жду от тебя аопросов и конструктивной критики. Какие положительные моменты ты видишь, а какие недостатки. Вместе мы должны решить, стоит ли развивать идею или нет.\"},{\"name\":\"docker\",\"text\":\"Ты — AI-помощник для работы с docker. Твоя задача — превращать человеческие запросы в корректные команды docker.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<команда PM2>\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи выполняющиеся образы\\nОтвет:\\n# Ваш запрос: Покажи выполняющиеся образы\\ndockerps\"},{\"name\":\"Опытный разработчик NodeJs Javascript\",\"text\":\"Ты опытный разработчик NodeJs Javascript.\"},{\"name\":\"Просто для болтовни\",\"text\":\".\"},{\"name\":\"Простое приложение NodeJs.\",\"text\":\"Ты опытный разработчик NodeJs Javascript.\\nСоздай простое приложение с сервером server.js и интерфейсом пользователя на чистой Javascript.\"},{\"name\":\"tmp_prompt\",\"text\":\"Always answer \\\"no\\\"\"},{\"name\":\"PostgreSQL команд\",\"text\":\"Ты — AI-помощник для работы с PostgreSQL. Твоя задача — превращать человеческие запросы в корректные запросы PostgreSQL. Запросы о структуре  объектов БД нужно брать из information_schema.\\n\\nДля запроса структуры объектов Нужно сформировать ответ так, чтобы резуль��ат был в виде sql команды CREATE ... \\nУчитывай схему в которой объект.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<запрос в БД PostgreSQL>\\n\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи структуру таблицы auction .\\n\\nОтвет:\\nSELECT\\n    'CREATE TABLE carl_data.auction (' AS create_table_stmt\\nUNION ALL\\nSELECT\\n    string_agg(\\n            column_definition,\\n            ', '\\n    )\\nFROM (\\n    SELECT\\n        column_name || ' ' ||\\n        data_type ||\\n        COALESCE('(' || character_maximum_length || ')', '') ||\\n        CASE\\n            WHEN is_nullable = 'NO' THEN ' NOT NULL'\\n            ELSE ''\\n            END ||\\n        COALESCE(' DEFAULT ' || column_default, '') AS column_definition\\n    FROM\\n        information_schema.columns\\n    WHERE\\n        table_name = 'auction'\\n            AND table_schema = 'carl_data'\\n    ORDER BY\\n        ordinal_position\\n) AS columns\\nUNION ALL\\nSELECT\\n    ');';\"},{\"name\":\"Obsidian\",\"text\":\"Нужны советы по Obsidian\"},{\"name\":\"Объясни логику PLPGSQL функции\",\"text\":\"Ты опытный разработчик на Postgresql, SQL, PLPGSQL.\\nОбъясни логику функции приведенной нижею Если есть вопросы - задавай.\\n\\n--- Текст функции:\"},{\"name\":\"Автомобили.\",\"text\":\"Автомобили.\\n\\nКакаие популярные марки грузовых автомобилей ты знаешь?\\nВыведи только список названий всех. Только названия без любой дополнительной информации.\"},{\"name\":\"Автомобили. марки легковых. json\",\"text\":\"Автомобили. марки легковых. json \\n\\nКакаие популярные марки легковых автомобилей ты знаешь?\\nВыведи только список ��азваний марок желательно всех, которые известны. Только названия без любой дополнительной информации. В виде json  [{ \\\"mark\\\":\\\"Volvo\\\" }, {} ]\"},{\"name\":\"test_prompt_1756830151\",\"text\":\"Это обновленный тестовый системный промпт.\"}]\r\n------------------------------------------------------------------------------\r\n\r\n2.5. Удаление промпта (DELETE /api/prompts/:name)\r\n{\"message\":\"Prompt deleted successfully\"}\r\n------------------------------------------------------------------------------\r\n\r\n2.6. Финальная проверка списка промптов\r\n[{\"name\":\"task  Задание для обработки команд управления задачами\",\"text\":\"# Задание для обработки команд управления задачами\\n\\n## Доступные команды\\n1. Вывести список задач\\n   - ID команды: 1\\n   - Параметры: нет\\n\\n2. Создать задачу\\n   - ID команды: 2\\n   - Параметры: task_name (название задачи)\\n\\n3. Закрыть задачу\\n   - ID команды: 3\\n   - Параметры: task_name (название задачи)\\n\\n## Формат ответа\\nВаша задача - проанализировать входной текст пользователя и определить:\\n- Какая команда запрашивается (id_cmd)\\n- Какие параметры предоставлены (task_name, если применимо)\\n\\nОтвет должен быть представлен в формате JSON со следующей структурой:\\n\\n{\\n    \\\"id_cmd\\\": <номер команды>,\\n    \\\"task_name\\\": \\\"<название задачи>\\\" // только для команд 2 и 3\\n}\\n\\n### Требования\\n1. Выходной текст должен быть чистым текстом в формате JSON.\\n2. Не используй Markdown-разметку (никаких json , ``, **, * и т.д.).\\n3. Вывод должен быть строго в формате JSON, без дополнительных символов или комментариев.\\n4. Входные строки начинающиеся с трех тире(---) считаем коментириями, их не анализируем как команду.\\n\\n\\n## Примеры\\n\\n### Пример 1\\nВходной текст: \\\"Добавь задачу - Сходить в магазин\\\"\\nОтвет:\\n{\\n    \\\"id_cmd\\\": 2,\\n    \\\"task_name\\\": \\\"Сходить в магазин\\\"\\n}\\n\\n### Пример 2\\nВходной текст: \\\"Покажи список задач\\\"\\nОтвет:\\n{\\n    \\\"id_cmd\\\": 1\\n}\"},{\"name\":\"pm2\",\"text\":\"Ты — AI-помощник для работы с PM2. Твоя задача — превращать человеческие запросы в корректные команды PM2.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<команда PM2>\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи статус\\nОтвет:\\n# Ваш запрос: Покажи статус  \\npm2 status\\n\\nЗапрос:\\nПокажи мне логи задания test_https\\nОтвет:\\n# Ваш запрос: Покажи мне логи задания test_https  \\npm2 logs test_https\\n\\nЗапрос:\\nПерезапусти процесс api_server\\nОтвет:\\n# Ваш запрос: Перезапусти процесс api_server  \\npm2 restart api_server\\n\\nЗапрос:\\nОстанови все процессы\\nОтвет:\\n# Ваш запрос: Останови все процессы  \\npm2 stop all\\n\\nЗапрос:\\nДобавь процесс my_app с файлом server.js\\nОтвет:\\n# Ваш запрос: Добавь процесс my_app с файлом server.js  \\npm2 start server.js --name my_app\\n\\nЗапрос:\\nУдали процесс worker\\nОтвет:\\n# Ваш запрос: Удали процесс worker  \\npm2 delete worker\\n\\nПравила:\\n\\nВсегда возвращай только одну команду.\\nЕсли запрос неясен, предложи уточняющий вариант команды.\\nЕсли пользователь спрашивает про справку, используй pm2 -h.\\nЕсли запрос не относится к PM2, напиши \\\"command unknown\\\".\\nНе используй Markdown-разметку (никаких json , ``, **, * и т.д.).\\nВывод должен быть строго в формате JSON, без дополнитель��ых символов или комментариев.\\nВходные строки начинающиеся с трех тире(---) считаем коментириями, их не анализируем как команду.\"},{\"name\":\"Linux Команды\",\"text\":\"Ты — AI-помощник для работы с Linux. Твоя задача — превращать человеческие запросы в корректные команды linux.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<команда linux>\\n\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи содержимое директории\\nОтвет:\\n# Ваш запрос: Покажи содержимое директории  \\nls -la\\n\\nПравила:\\n\\nВсегда возвращай только одну команду.\\nЕсли запрос неясен, предложи уточняющий вариант команды.\\nЕсли пользователь спрашивает про справку, используй pm2 -h.\\nЕсли запрос не относится к PM2, напиши \\\"command unknown\\\".\\nНе используй Markdown-разметку (никаких json , ``, **, * и т.д.).\\nВывод должен быть строго в формате JSON, без дополнительных символов или комментариев.\\nВходные строки начинающиеся с трех тире(---) считаем коментириями, их не анализируем как команду.\"},{\"name\":\"Linux: Просто помошник .\",\"text\":\"Ты — AI-помощник для работы с Linux.\"},{\"name\":\"Пустой sys промпт\",\"text\":\"1\"},{\"name\":\"Разработчик Postgresql\",\"text\":\"ТЫ крутой разработчик на Postgresql.\"},{\"name\":\"Системный Аналитик и коллега\",\"text\":\"Выступай в роли Системного Аналитика в области IT, с навыками разработки систем на NodeJs и Javascript? а так же и как мой коллега. Давай обсудим некоторые мои идеи. Жду от тебя аопросов и конструктивной критики. Какие положительные моменты ты видишь, а какие недостатки. Вместе мы должны решить, стоит ли развивать идею или нет.\"},{\"name\":\"docker\",\"text\":\"Ты — AI-помощник для работы с docker. Твоя задача — превращать человеческие запросы в корректные команды docker.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<команда PM2>\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи выполняющиеся образы\\nОтвет:\\n# Ваш запрос: Покажи выполняющиеся образы\\ndockerps\"},{\"name\":\"Опытный разработчик NodeJs Javascript\",\"text\":\"Ты опытный разработчик NodeJs Javascript.\"},{\"name\":\"Просто для болтовни\",\"text\":\".\"},{\"name\":\"Простое приложение NodeJs.\",\"text\":\"Ты опытный разработчик NodeJs Javascript.\\nСоздай простое приложение с сервером server.js и интерфейсом пользователя на чистой Javascript.\"},{\"name\":\"tmp_prompt\",\"text\":\"Always answer \\\"no\\\"\"},{\"name\":\"PostgreSQL команд\",\"text\":\"Ты — AI-помощник для работы с PostgreSQL. Твоя задача — превращать человеческие запросы в корректные запросы PostgreSQL. Запросы о структуре  объектов БД нужно брать из information_schema.\\n\\nДля запроса структуры объектов Нужно сформировать ответ так, чтобы резуль��ат был в виде sql команды CREATE ... \\nУчитывай схему в которой объект.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<запрос в БД PostgreSQL>\\n\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи структуру таблицы auction .\\n\\nОтвет:\\nSELECT\\n    'CREATE TABLE carl_data.auction (' AS create_table_stmt\\nUNION ALL\\nSELECT\\n    string_agg(\\n            column_definition,\\n            ', '\\n    )\\nFROM (\\n    SELECT\\n        column_name || ' ' ||\\n        data_type ||\\n        COALESCE('(' || character_maximum_length || ')', '') ||\\n        CASE\\n            WHEN is_nullable = 'NO' THEN ' NOT NULL'\\n            ELSE ''\\n            END ||\\n        COALESCE(' DEFAULT ' || column_default, '') AS column_definition\\n    FROM\\n        information_schema.columns\\n    WHERE\\n        table_name = 'auction'\\n            AND table_schema = 'carl_data'\\n    ORDER BY\\n        ordinal_position\\n) AS columns\\nUNION ALL\\nSELECT\\n    ');';\"},{\"name\":\"Obsidian\",\"text\":\"Нужны советы по Obsidian\"},{\"name\":\"Объясни логику PLPGSQL функции\",\"text\":\"Ты опытный разработчик на Postgresql, SQL, PLPGSQL.\\nОбъясни логику функции приведенной нижею Если есть вопросы - задавай.\\n\\n--- Текст функции:\"},{\"name\":\"Автомобили.\",\"text\":\"Автомобили.\\n\\nКакаие популярные марки грузовых автомобилей ты знаешь?\\nВыведи только список названий всех. Только названия без любой дополнительной информации.\"},{\"name\":\"Автомобили. марки легковых. json\",\"text\":\"Автомобили. марки легковых. json \\n\\nКакаие популярные марки легковых автомобилей ты знаешь?\\nВыведи только список названий марок желательно всех, которые известны. Только названия без любой дополнительной информации. В виде json  [{ \\\"mark\\\":\\\"Volvo\\\" }, {} ]\"}](Ожидается пустой результат для тестового промпта)\r\n\r\n------------------------------------------------------------------------------\r\n\r\n\r\n==============================================================================\r\n 3. Тест отправки запроса к AI (/api/send-request)\r\n==============================================================================\r\n\r\n3.1. Отправка простого запроса к модели Groq (POST /api/send-request)\r\n{\"error\":\"GROQ API Error: 404 {\\\"error\\\":{\\\"message\\\":\\\"Not Found\\\"}}\",\"details\":{\"stack\":\"Error: GROQ API Error: 404 {\\\"error\\\":{\\\"message\\\":\\\"Not Found\\\"}}\\n    at GroqService.sendRequest (C:\\\\ERV\\\\projects-ex\\\\aian-model\\\\groq-service.js:65:19)\\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\\n    at async C:\\\\ERV\\\\projects-ex\\\\aian-model\\\\server.js:549:30\"}}\r\n------------------------------------------------------------------------------\r\n\r\n\r\n==============================================================================\r\n 4. Тест истории ответов (/api/responses)\r\n==============================================================================\r\n\r\n4.1. Получение последних 5 записей из истории (GET /api/responses)\r\n(Должна содержать ответ из предыдущего теста)\r\n{\"responses\":[{\"id\":\"1756794440370\",\"timestamp\":\"2025-09-02T06:27:20.370Z\",\"model\":\"moonshotai/kimi-dev-72b:free\",\"provider\":\"openroute\",\"prompt\":\"Context from panel server:\\n# Обращение к DEV(разработческому) серверу postgres на d2(w2)\\r\\npsql -h 192.168.1.12 -U carl -d carlinkng\\r\\n\\r\\n# На команду вида: Смержи main с dev нужно выдать:\\r\\ngit checkout main \\\\ \\r\\ngit merge dev \\\\ \\r\\ngit checkout dev \\r\\n\\r\\n# На команду вида: юникод или utf или utf8 или 65001 выдать:                                \\r\\nchcp 65001\\n\\n---\\n\\nYou are a Linux terminal AI assistant. Convert user requests to shell commands. CRITICAL: Return ONLY the command, no explanations, no text, no markdown. Examples: User: \\\"show files\\\" → Response: \\\"ls -la\\\". User: \\\"check disk space\\\" → Response: \\\"df -h\\\".\",\"inputText\":\"pm2 перезапусти rosmos panel\",\"response\":\"```bash\\npm2 restart rosmos_panel\\n```\",\"tokens\":{\"input\":214,\"output\":13,\"total\":227,\"source\":\"api\"},\"autoSaved\":true},{\"id\":\"1756487652489\",\"timestamp\":\"2025-08-29T17:14:12.489Z\",\"model\":\"moonshotai/kimi-dev-72b:free\",\"provider\":\"openroute\",\"prompt\":\".\",\"inputText\":\"Привет!\\nКакая ты модель?\",\"response\":\"Hi there! I'm an OpenAI chat model, here to help with your questions. What can I do for you today?\",\"tokens\":{\"input\":23,\"output\":27,\"total\":50,\"source\":\"api\"},\"autoSaved\":true},{\"id\":\"1756216787649\",\"timestamp\":\"2025-08-26T13:59:47.649Z\",\"model\":\"moonshotai/kimi-dev-72b:free\",\"provider\":\"openroute\",\"prompt\":\"Context from panel server:\\n# Обращение к DEV(разработческому) серверу postgres на d2(w2)\\r\\npsql -h 192.168.1.12 -U carl -d carlinkng\\r\\n\\r\\n# На команду вида: Смержи main с dev нужно выдать:\\r\\ngit checkout main \\\\ \\r\\ngit merge dev \\\\ \\r\\ngit checkout dev \\r\\n\\r\\n# На команду вида: юникод или utf или utf8 или 65001 выдать:                                \\r\\nchcp 65001\\n\\n---\\n\\nYou are a Linux terminal AI assistant. Convert user requests to shell commands. CRITICAL: Return ONLY the command, no explanations, no text, no markdown. Examples: User: \\\"show files\\\" → Response: \\\"ls -la\\\". User: \\\"check disk space\\\" → Response: \\\"df -h\\\".\",\"inputText\":\"какая версия linux установлена\",\"response\":\"uname -r\",\"tokens\":{\"input\":213,\"output\":4,\"total\":217,\"source\":\"api\"},\"autoSaved\":true},{\"id\":\"1756216578571\",\"timestamp\":\"2025-08-26T13:56:18.571Z\",\"model\":\"moonshotai/kimi-dev-72b:free\",\"provider\":\"openroute\",\"prompt\":\"Context from panel server:\\n# Обращение к DEV(разработческому) серверу postgres на d2(w2)\\r\\npsql -h 192.168.1.12 -U carl -d carlinkng\\r\\n\\r\\n# На команду вида: Смержи main с dev нужно выдать:\\r\\ngit checkout main \\\\ \\r\\ngit merge dev \\\\ \\r\\ngit checkout dev \\r\\n\\r\\n# На команду вида: юникод или utf или utf8 или 65001 выдать:                                \\r\\nchcp 65001\\n\\n---\\n\\nYou are a Linux terminal AI assistant. Convert user requests to shell commands. CRITICAL: Return ONLY the command, no explanations, no text, no markdown. Examples: User: \\\"show files\\\" → Response: \\\"ls -la\\\". User: \\\"check disk space\\\" → Response: \\\"df -h\\\".\",\"inputText\":\"сделать запуск sshd автоматическим\",\"response\":\"systemctl enable sshd\\nsystemctl start sshd\",\"tokens\":{\"input\":213,\"output\":12,\"total\":225,\"source\":\"api\"},\"autoSaved\":true},{\"id\":\"1756198977187\",\"timestamp\":\"2025-08-26T09:02:57.187Z\",\"model\":\"moonshotai/kimi-dev-72b:free\",\"provider\":\"openroute\",\"prompt\":\"Context from panel server:\\n# Обращение к DEV(разработческому) серверу postgres на d2(w2)\\r\\npsql -h 192.168.1.12 -U carl -d carlinkng\\r\\n\\r\\n# На команду вида: Смержи main с dev нужно выдать:\\r\\ngit checkout main \\\\ \\r\\ngit merge dev \\\\ \\r\\ngit checkout dev \\r\\n\\r\\n# На команду вида: юникод или utf или utf8 или 65001 выдать:                                \\r\\nchcp 65001\\n\\n---\\n\\nYou are a Linux terminal AI assistant. Convert user requests to shell commands. CRITICAL: Return ONLY the command, no explanations, no text, no markdown. Examples: User: \\\"show files\\\" → Response: \\\"ls -la\\\". User: \\\"check disk space\\\" → Response: \\\"df -h\\\".\",\"inputText\":\"на каких портах что-то есть ?\",\"response\":\"netstat -tunlp | grep LISTEN\\n\",\"tokens\":{\"input\":214,\"output\":12,\"total\":226,\"source\":\"api\"},\"autoSaved\":true}],\"total\":102,\"offset\":0,\"limit\":5,\"hasMore\":true}\r\n------------------------------------------------------------------------------\r\n\r\n\r\n==============================================================================\r\n 5. Базовые тесты для RAG API\r\n==============================================================================\r\n\r\n5.1. Получение списка контекстных кодов (GET /api/rag/context-codes)\r\n{\"error\":\"Не удалось получить контекстные коды\"}\r\n------------------------------------------------------------------------------\r\n\r\n5.2. Получение списка документов (GET /api/rag/documents)\r\n{\"error\":\"Не удалось получить список документов\"}\r\n------------------------------------------------------------------------------\r\n\r\n\r\n==============================================================================\r\n Все тесты завершены!\r\n==============================================================================",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224",
    "stdin_id": "c3d1df4e-0341-4898-b63b-63e4ef585490"
  },
  {
    "id": "51d4d10d-c6b5-43f8-be8e-e7d43e5c7066",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T16:25:39.317Z",
    "type": "stdout",
    "terminal_output": "#!/bin/bash\r\n\r# ==============================================================================\r\n\r# CURL-тесты для REST API сервиса AI Analytics Interface\r\n\r#\r\n\r# Использование:\r\n\r# 1. Убедитесь, что сервер запущен: node server.js\r\n\r# 2. Запустите этот скрипт из терминала: bash ./tests/test_curl.sh\r\n\r# 3. Скрипт последовательно выполнит тесты и выведет результаты.\r\n\r# ==============================================================================\r\n\r\n\r# --- Конфигурация ---\r\n\rBASE_URL=\"http://192.168.1.254:3002\"\r\n\rHEADER_CONTENT_TYPE=\"Content-Type: application/json\"\r\n\rHEADER_ACCEPT=\"Accept: application/json\"\r\n\rPROMPT_NAME=\"test_prompt_$(date +%s)\" # Уникальное имя промпта для каждого запуска\r\n\r\n\r# --- Вспомогательные функции ---\r\n\rfunction print_header() {\r\n\r    echo \"\"\r\n\r    echo \"==============================================================================\"\r\n\r    echo \" $1\"\r\n\r    echo \"==============================================================================\"\r\n\r    echo \"\"\r\n\r}\r\n\r\n\rfunction print_footer() {\r\n\r    echo \"\"\r\n\r    echo \"------------------------------------------------------------------------------\"\r\n\r    echo \"\"\r\n\r}\r# ==============================================================================\r# --- ТЕСТОВЫЙ СЦЕНАРИЙ ---\r# ==============================================================================\r# --- 1. Проверка состояния сервера и конфигурации ---\rprint_header \"1. Тесты состояния сервера и конфигурации\"\recho \"1.1. Запрос информации о сервере (GET /server-info)\"\rcurl -X GET \"${BASE_URL}/server-info\" -H \"${HEADER_ACCEPT}\"\rprint_footer\recho \"1.2. Запрос конфигурации API (GET /api/config)\"\rcurl -X GET \"${BASE_URL}/api/config\" -H \"${HEADER_ACCEPT}\"\rprint_footer\recho \"1.3. Запрос списка всех доступных моделей (GET /api/all-models)\"\rcurl -X GET \"${BASE_URL}/api/all-models\" -H \"${HEADER_ACCEPT}\"\rprint_footer\r# --- 2. Тестирование CRUD операций для Промптов (/api/prompts) ---\rprint_header \"2. Тесты CRUD для Промптов\"\recho \"2.1. Создание нового промпта (POST /api/prompts)\"\rcurl -X POST \"${BASE_URL}/api/prompts\" \\\r-H \"${HEADER_CONTENT_TYPE}\" \\\r-d '{\r    \"name\": \"'\"${PROMPT_NAME}\"'\",\r    \"text\": \"Это тестовый системный промпт.\"\r}'\rprint_footer\recho \"2.2. Получение списка всех промптов для проверки (GET /api/prompts)\"\rcurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\"\rprint_footer\recho \"2.3. Обновление промпта (PUT /api/prompts/:name)\"\rcurl -X PUT \"${BASE_URL}/api/prompts/${PROMPT_NAME}\" \\\r-H \"${HEADER_CONTENT_TYPE}\" \\\r-d '{\r    \"text\": \"Это обновленный тестовый системный промпт.\"\r}'\rprint_footer\recho \"2.4. Повторное получение списка для проверки обновления\"\rcurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\"\rprint_footer\recho \"2.5. Удаление промпта (DELETE /api/prompts/:name)\"\rcurl -X DELETE \"${BASE_URL}/api/prompts/${PROMPT_NAME}\"\rprint_footer\recho \"2.6. Финальная проверка списка промптов\"\rcurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\"\recho \"(Ожидается пустой результат для тестового промпта)\"\rprint_footer\r# --- 3. Тестирование основного эндпоинта отправки запроса к AI ---\rprint_header \"3. Тест отправки запроса к AI (/api/send-request)\"\recho \"3.1. Отправка простого запроса к модели Groq (POST /api/send-request)\"\rcurl -X POST \"${BASE_URL}/api/send-request\" \\\r-H \"${HEADER_CONTENT_TYPE}\" \\\r-d '{\r    \"model\": \"llama3-8b-8192\",\r    \"provider\": \"groq\",\r    \"prompt\": \"You are a helpful assistant.\",\r    \"inputText\": \"What is the capital of France? Answer in one word.\",\r    \"saveResponse\": false\r}'\rprint_footer\r# --- 4. Тестирование истории ответов ---\rprint_header \"4. Тест истории ответов (/api/responses)\"\recho \"4.1. Получение последних 5 записей из истории (GET /api/responses)\"\recho \"(Должна содержать ответ из предыдущего теста)\"\rcurl -X GET \"${BASE_URL}/api/responses?limit=5\" -H \"${HEADER_ACCEPT}\"\rprint_footer\r# --- 5. Базовые тесты для RAG API ---\rprint_header \"5. Базовые тесты для RAG API\"\recho \"5.1. Получение списка контекстных кодов (GET /api/rag/context-codes)\"\rcurl -X GET \"${BASE_URL}/api/rag/context-codes\" -H \"${HEADER_ACCEPT}\"\rprint_footer\recho \"5.2. Получение списка документов (GET /api/rag/documents)\"\rcurl -X GET \"${BASE_URL}/api/rag/documents\" -H \"${HEADER_ACCEPT}\"\rprint_footer\rprint_header \"Все тесты завершены!\"\r\u0007    \"model\": \"llama3-8b-8192\",\r    \"provider\": \"groq\",\r    \"prompt\": \"You are a helpful assistant.\",\r    \"inputText\": \"What is the capital of France? Answer in one word.\",\r    \"saveResponse\": false\r}'\rprint_footer\r# --- 4. Тестирование истории ответов ---\rprint_header \"4. Тест истории ответов (/api/responses)\"\recho \"4.1. Получение последних 5 записей из истории (GET /api/responses)\"\recho \"(Должна содержать ответ из предыдущего теста)\"\rcurl -X GET \"${BASE_URL}/api/responses?limit=5\" -H \"${HEADER_ACCEPT}\"\rprint_footer\r# --- 5. Базовые тесты для RAG API ---\rprint_header \"5. Базовые тесты для RAG API\"\recho \"5.1. Получение списка контекстных кодов (GET /api/rag/context-codes)\"\rcurl -X GET \"${BASE_URL}/api/rag/context-codes\" -H \"${HEADER_ACCEPT}\"\rprint_footer\recho \"5.2. Получение списка документов (GET /api/rag/documents)\"\rcurl -X GET \"${BASE_URL}/api/rag/documents\" -H \"${HEADER_ACCEPT}\"\rprint_footer\rprint_header \"Все тесты завершены!\"\rbash ./test_curl.sh \r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\bP#!/bin/bash\r\n\r# ==============================================================================\r\n\r# CURL-тесты для REST API сервиса AI Analytics Interface\r\n\r#\r\n\r# Использование:\r\n\r# 1. Убедитесь, что сервер запущен: node server.js\r\n\r# 2. Запустите этот скрипт из терминала: bash ./tests/test_curl.sh\r\n\r# 3. Скрипт последовательно выполнит тесты и выведет результаты.\r\n\r# ==============================================================================\r\n\r\n\r# --- Конфигурация ---\r\n\rBASE_URL=\"http://192.168.1.254:3002\"\r\n\rHEADER_CONTENT_TYPE=\"Content-Type: application/json\"\r\n\rHEADER_ACCEPT=\"Accept: application/json\"\r\n\rPROMPT_NAME=\"test_prompt_$(date +%s)\" # Уникальное имя промпта для каждого запуска\r\n\r\n\r# --- Вспомогательные функции ---\r\n\rfunction print_header() {\r\n\r    echo \"\"\r\n\r    echo \"==============================================================================\"\r\n\r    echo \" $1\"\r\n\r    echo \"==============================================================================\"\r\n\r    echo \"\"\r\n\r}\r\n\r\n\rfunction print_footer() {\r\n\r    echo \"\"\r\n\r    echo \"------------------------------------------------------------------------------\"\r\n\r    echo \"\"\r\n\r}\r# ==============================================================================\r# --- ТЕСТОВЫЙ СЦЕНАРИЙ ---\r# ==============================================================================\r# --- 1. Проверка состояния сервера и конфигурации ---\rprint_header \"1. Тесты состояния сервера и конфигурации\"\recho \"1.1. Запрос информации о сервере (GET /server-info)\"\rcurl -X GET \"${BASE_URL}/server-info\" -H \"${HEADER_ACCEPT}\"\rprint_footer\recho \"1.2. Запрос конфигурации API (GET /api/config)\"\rcurl -X GET \"${BASE_URL}/api/config\" -H \"${HEADER_ACCEPT}\"\rprint_footer\recho \"1.3. Запрос списка всех доступных моделей (GET /api/all-models)\"\rcurl -X GET \"${BASE_URL}/api/all-models\" -H \"${HEADER_ACCEPT}\"\rprint_footer\r# --- 2. Тестирование CRUD операций для Промптов (/api/prompts) ---\rprint_header \"2. Тесты CRUD для Промптов\"\recho \"2.1. Создание нового промпта (POST /api/prompts)\"\rcurl -X POST \"${BASE_URL}/api/prompts\" \\\r-H \"${HEADER_CONTENT_TYPE}\" \\\r-d '{\r    \"name\": \"'\"${PROMPT_NAME}\"'\",\r    \"text\": \"Это тестовый системный промпт.\"\r}'\rprint_footer\recho \"2.2. Получение списка всех промптов для проверки (GET /api/prompts)\"\rcurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\"\rprint_footer\recho \"2.3. Обновление промпта (PUT /api/prompts/:name)\"\rcurl -X PUT \"${BASE_URL}/api/prompts/${PROMPT_NAME}\" \\\r-H \"${HEADER_CONTENT_TYPE}\" \\\r-d '{\r    \"text\": \"Это обновленный тестовый системный промпт.\"\r}'\rprint_footer\recho \"2.4. Повторное получение списка для проверки обновления\"\rcurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\"\rprint_footer\recho \"2.5. Удаление промпта (DELETE /api/prompts/:name)\"\rcurl -X DELETE \"${BASE_URL}/api/prompts/${PROMPT_NAME}\"\rprint_footer\recho \"2.6. Финальная проверка списка промптов\"\rcurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\"\recho \"(Ожидается пустой результат для тестового промпта)\"\rprint_footer\r# --- 3. Тестирование основного эндпоинта отправки запроса к AI ---\rprint_header \"3. Тест отправки запроса к AI (/api/send-request)\"\recho \"3.1. Отправка простого запроса к модели Groq (POST /api/send-request)\"\rcurl -X POST \"${BASE_URL}/api/send-request\" \\\r-H \"${HEADER_CONTENT_TYPE}\" \\\r-d '{\r    \"model\": \"llama3-8b-8192\",\r    \"provider\": \"groq\",\r    \"prompt\": \"You are a helpful assistant.\",\r    \"inputText\": \"What is the capital of France? Answer in one word.\",\r    \"saveResponse\": false\r}'\rprint_footer\r# --- 4. Тестирование истории ответов ---\rprint_header \"4. Тест истории ответов (/api/responses)\"\recho \"4.1. Получение последних 5 записей из истории (GET /api/responses)\"\recho \"(Должна содержать ответ из предыдущего теста)\"\rcurl -X GET \"${BASE_URL}/api/responses?limit=5\" -H \"${HEADER_ACCEPT}\"\rprint_footer\r# --- 5. Базовые тесты для RAG API ---\rprint_header \"5. Базовые тесты для RAG API\"\recho \"5.1. Получение списка контекстных кодов (GET /api/rag/context-codes)\"\rcurl -X GET \"${BASE_URL}/api/rag/context-codes\" -H \"${HEADER_ACCEPT}\"\rprint_footer\recho \"5.2. Получение списка документов (GET /api/rag/documents)\"\rcurl -X GET \"${BASE_URL}/api/rag/documents\" -H \"${HEADER_ACCEPT}\"\rprint_footer\rprint_header \"Все тесты завершены!\"\r\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007^C",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224"
  },
  {
    "id": "a5409182-0de8-447a-b0e4-2f2a708ffbf4",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T16:25:43.095Z",
    "type": "stdin",
    "executed_command": "nano test_curl.sh",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224"
  },
  {
    "id": "eb6b57c6-e251-4f2c-a02f-15a2d7adc554",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T17:04:26.798Z",
    "type": "stdin",
    "executed_command": "1\"",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224"
  },
  {
    "id": "3ce3a5d2-912c-47d3-ab20-af106ec9396a",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T17:04:27.293Z",
    "type": "stdin",
    "executed_command": "1\"",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224"
  },
  {
    "id": "e29bc986-7875-4d23-ba13-df91f943d7e3",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T17:04:33.547Z",
    "type": "stdout",
    "terminal_output": "bash ./test_curl.sh \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\bPnano test_curl.sh\r\n\r[ Reading... ][ Read 121 lines ]  GNU nano 7.2                                          test_curl.sh                                                    \r^G Help^O Write Out   ^W Where Is    ^K Cut^T Execute     ^C Location    M-U UndoM-A Set Mark\r^X Exit^R Read File   ^\\ Replace     ^U Paste^J Justify     ^/ Go To Line  M-E RedoM-6 Copy\r#!/bin/bash\r# ==============================================================================\r# CURL-тесты для REST API сервиса AI Analytics Interface\r#\b# Использование:\r# 1. Убедитесь, что сервер запущен: node server.js\r# 2. Запустите этот скрипт из терминала: bash ./tests/test_curl.sh\r# 3. Скрипт последовательно выполнит тесты и выведет результаты.\r# ==============================================================================\r# --- Конфигурация ---\rBASE_URL=\"http://192.168.1.254:3002\"\rHEADER_CONTENT_TYPE=\"Content-Type: application/json\"\rHEADER_ACCEPT=\"Accept: application/json\"\rPROMPT_NAME=\"test_prompt_$(date +%s)\" # Уникальное имя промпта для каждого запуска\r# --- Вспомогательные функции ---\rfunction print_header() {echo \"\"echo \"==============================================================================\"echo \" $1\"echo \"==============================================================================\"echo \"\"\r}\bfunction print_footer() {\r\recho \"\"echo \"------------------------------------------------------------------------------\"echo \"\"\r}\b# ==============================================================================\r# --- ТЕСТОВЫЙ СЦЕНАРИЙ ---\r# ==============================================================================\r# --- 1. Проверка состояния сервера и конфигурации ---\rprint_header \"1. Тесты состояния сервера и конфигурации\"\recho \"1.1. Запрос информации о сервере (GET /server-info)\"\rcurl -X GET \"${BASE_URL}/server-info\" -H \"${HEADER_ACCEPT}\"\rprint_footerecho \"1.2. Запрос конфигурации API (GET /api/config)\"\rcurl -X GET \"${BASE_URL}/api/config\" -H \"${HEADER_ACCEPT}\"\rprint_footer\recho \"1.3. Запрос списка всех доступных моделей (GET /api/all-models)\"\rcurl -X GET \"${BASE_URL}/api/all-models\" -H \"${HEADER_ACCEPT}\"\rprint_footer\r# --- 2. Тестирование CRUD операций для Промптов (/api/prompts) ---\rprint_header \"2. Тесты CRUD для Промптов\"\recho \"2.1. Создание нового промпта (POST /api/prompts)\"\rcurl -X POST \"${BASE_URL}/api/prompts\" \\\r-H \"${HEADER_CONTENT_TYPE}\" \\\r-d '{\r\"name\": \"'\"${PROMPT_NAME}\"'\",\"text\": \"Это тестовый системный промпт.\"\r}'\rprint_footer\recho \"2.2. Получение списка всех промптов для проверки (GET /api/prompts)\"\r# ==============================================================================\r# --- ТЕСТОВЫЙ СЦЕНАРИЙ ---\r# ==============================================================================\r}\bfunction print_footer() {echo \"\"echo \"------------------------------------------------------------------------------\"echo \"\"\r}\bfunction print_header() {echo \"\"echo \"==============================================================================\"echo \" $1\"echo \"==============================================================================\"echo \"\"\rBASE_URL=\"http://192.168.1.254:3002\"\rHEADER_CONTENT_TYPE=\"Content-Type: application/json\"\rHEADER_ACCEPT=\"Accept: application/json\"\rPROMPT_NAME=\"test_prompt_$(date +%s)\" # Уникальное имя промпта для каждого запуска\r# --- Вспомогательные функции ---\r# Использование:\r# 1. Убедитесь, что сервер запущен: node server.js\r# 2. Запустите этот скрипт из терминала: bash ./tests/test_curl.sh\r# 3. Скрипт последовательно выполнит тесты и выведет результаты.\r# ==============================================================================\r# --- Конфигурация ---\r#!/bin/bash\r# ==============================================================================\r# CURL-тесты для REST API сервиса AI Analytics Interface\r#\becho \"\"echo \"------------------------------------------------------------------------------\"echo \"\"\r}\b# ==============================================================================\r# --- ТЕСТОВЫЙ СЦЕНАРИЙ ---\r# ==============================================================================\r# --- 1. Проверка состояния сервера и конфигурации ---\rprint_header \"1. Тесты состояния сервера и конфигурации\"\recho \"1.1. Запрос информации о сервере (GET /server-info)\"\rcurl -X GET \"${BASE_URL}/server-info\" -H \"${HEADER_ACCEPT}\"\rprint_footerecho \"1.2. Запрос конфигурации API (GET /api/config)\"\rcurl -X GET \"${BASE_URL}/api/config\" -H \"${HEADER_ACCEPT}\"\rprint_footer\recho \"1.3. Запрос списка всех доступных моделей (GET /api/all-models)\"\rcurl -X GET \"${BASE_URL}/api/all-models\" -H \"${HEADER_ACCEPT}\"\rprint_footer\r# --- 2. Тестирование CRUD операций для Промптов (/api/prompts) ---\rprint_header \"2. Тесты CRUD для Промптов\"\recho \"2.1. Создание нового промпта (POST /api/prompts)\"\rcurl -X POST \"${BASE_URL}/api/prompts\" \\\r-H \"${HEADER_CONTENT_TYPE}\" \\\r-d '{\b\"name\": \"'\"${PROMPT_NAME}\"'\",\"text\": \"Это тестовый системный промпт.\"\r}'\rprint_footer\recho \"2.2. Получение списка всех промптов для проверки (GET /api/prompts)\"\rcurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\"\rprint_footer\r# --- ТЕСТОВЫЙ СЦЕНАРИЙ ---\r# ==============================================================================\r# --- 1. Проверка состояния сервера и конфигурации ---\rprint_header \"1. Тесты состояния сервера и конфигурации\"\rfunction print_footer() {echo \"\"echo \"------------------------------------------------------------------------------\"echo \"\"\r}\b# ==============================================================================\recho \"==============================================================================\"echo \" $1\"echo \"==============================================================================\"echo \"\"\r}\bHEADER_ACCEPT=\"Accept: application/json\"\rPROMPT_NAME=\"test_prompt_$(date +%s)\" # Уникальное имя промпта для каждого запуска\r# --- Вспомогательные функции ---\rfunction print_header() {echo \"\"\r# 2. Запустите этот скрипт из терминала: bash ./tests/test_curl.sh\r# 3. Скрипт последовательно выполнит тесты и выведет результаты.\r# ==============================================================================\r# --- Конфигурация ---\rBASE_URL=\"http://192.168.1.254:3002\"\rHEADER_CONTENT_TYPE=\"Content-Type: application/json\"\r#!/bin/bash\r# ==============================================================================\r# CURL-тесты для REST API сервиса AI Analytics Interface\r#\b# Использование:\r# 1. Убедитесь, что сервер запущен: node server.js\rM   \r#!/bin/bash\r# ==============================================================================\r# CURL-тесты для REST API сервиса AI Analytics Interface\r#\b# Использование:\r# 1. Убедитесь, что сервер запущен: node server.js\r# 2. Запустите этот скрипт из терминала: bash ./tests/test_curl.sh\r# 3. Скрипт последовательно выполнит тесты и выведет результаты.\r# ==============================================================================\r# --- Конфигурация ---\rBASE_URL=\"http://192.168.1.254:3002\"\rHEADER_CONTENT_TYPE=\"Content-Type: application/json\"\rHEADER_ACCEPT=\"Accept: application/json\"\rPROMPT_NAME=\"test_prompt_$(date +%s)\" # Уникальное имя промпта для каждого запуска\r# --- Вспомогательные функции ---\rfunction print_header() {\r    echo \"\"\r    echo \"==============================================================================\"\r    echo \" $1\"\r    echo \"==============================================================================\"\r    echo \"\"\r}\b\nfunction print_footer() {echo \"\"\r\n    echo \"\"echo \"------------------------------------------------------------------------------\"\r\n    echo \"------------------------------------------------------------------------------\"echo \"\"\r\n    echo \"\"\r}\b\n}\b\n# ==============================================================================\r\n# ==============================================================================\r# --- ТЕСТОВЫЙ СЦЕНАРИЙ ---\r\n# --- ТЕСТОВЫЙ СЦЕНАРИЙ ---\r# ==============================================================================\r\n# ==============================================================================\r\n# --- 1. Проверка состояния сервера и конфигурации ---\r\n# --- 1. Проверка состояния сервера и конфигурации ---\rprint_header \"1. Тесты состояния сервера и конфигурации\"\r\nprint_header \"1. Тесты состояния сервера и конфигурации\"\r\necho \"1.1. Запрос информации о сервере (GET /server-info)\"\r\necho \"1.1. Запрос информации о сервере (GET /server-info)\"\rcurl -X GET \"${BASE_URL}/server-info\" -H \"${HEADER_ACCEPT}\"\r\ncurl -X GET \"${BASE_URL}/server-info\" -H \"${HEADER_ACCEPT}\"\rprint_footerecho \"1.2. Запрос конфигурации API (GET /api/config)\"\r\nprint_footerecho \"1.2. Запрос конфигурации API (GET /api/config)\"\rcurl -X GET \"${BASE_URL}/api/config\" -H \"${HEADER_ACCEPT}\"\r\ncurl -X GET \"${BASE_URL}/api/config\" -H \"${HEADER_ACCEPT}\"\rprint_footer\r\nprint_footer\r\necho \"1.3. Запрос списка всех доступных моделей (GET /api/all-models)\"\r\necho \"1.3. Запрос списка всех доступных моделей (GET /api/all-models)\"\rcurl -X GET \"${BASE_URL}/api/all-models\" -H \"${HEADER_ACCEPT}\"\r\ncurl -X GET \"${BASE_URL}/api/all-models\" -H \"${HEADER_ACCEPT}\"\rprint_footer\r\nprint_footer\r\n# --- 2. Тестирование CRUD операций для Промптов (/api/prompts) ---\r\n# --- 2. Тестирование CRUD операций для Промптов (/api/prompts) ---\rprint_header \"2. Тесты CRUD для Промптов\"\r\nprint_header \"2. Тесты CRUD для Промптов\"\r\necho \"2.1. Создание нового промпта (POST /api/prompts)\"\r\necho \"2.1. Создание нового промпта (POST /api/prompts)\"\rcurl -X POST \"${BASE_URL}/api/prompts\" \\\r\ncurl -X POST \"${BASE_URL}/api/prompts\" \\\r-H \"${HEADER_CONTENT_TYPE}\" \\\r\n-H \"${HEADER_CONTENT_TYPE}\" \\\r-d '{\r\n-d '{\b\"name\": \"'\"${PROMPT_NAME}\"'\",\r\n    \"name\": \"'\"${PROMPT_NAME}\"'\",\"text\": \"Это тестовый системный промпт.\"\r\n    \"text\": \"Это тестовый системный промпт.\"\r}'\r\n}'\rprint_footer\r\nprint_footer\r\necho \"2.2. Получение списка всех промптов для проверки (GET /api/prompts)\"\r\necho \"2.2. Получение списка всех промптов для проверки (GET /api/prompts)\"\rcurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\"\r\ncurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\"\rprint_footer\r\nprint_footer\r\necho \"2.3. Обновление промпта (PUT /api/prompts/:name)\"\r\necho \"2.3. Обновление промпта (PUT /api/prompts/:name)\"\rcurl -X PUT \"${BASE_URL}/api/prompts/${PROMPT_NAME}\" \\\r\ncurl -X PUT \"${BASE_URL}/api/prompts/${PROMPT_NAME}\" \\\r-H \"${HEADER_CONTENT_TYPE}\" \\\r\n-H \"${HEADER_CONTENT_TYPE}\" \\\r-d '{\r\n-d '{\b\"text\": \"Это обновленный тестовый системный промпт.\"\r\n    \"text\": \"Это обновленный тестовый системный промпт.\"\r}'\r\n}'\rprint_footer\r\nprint_footer\r\necho \"2.4. Повторное получение списка для проверки обновления\"\r\necho \"2.4. Повторное получение списка для проверки обновления\"\rcurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\"\r\ncurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\"\rprint_footer\r\nprint_footer\r\necho \"2.5. Удаление промпта (DELETE /api/prompts/:name)\"\r\necho \"2.5. Удаление промпта (DELETE /api/prompts/:name)\"\rcurl -X DELETE \"${BASE_URL}/api/prompts/${PROMPT_NAME}\"\r\ncurl -X DELETE \"${BASE_URL}/api/prompts/${PROMPT_NAME}\"\rprint_footer\r\nprint_footer\r\necho \"2.6. Финальная проверка списка промптов\"\r\necho \"2.6. Финальная проверка списка промптов\"\rcurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\"\r\ncurl -X GET \"${BASE_URL}/api/prompts\" -H \"${HEADER_ACCEPT}\"\recho \"(Ожидается пустой результат для тестового промпта)\"\r\necho \"(Ожидается пустой результат для тестового промпта)\"\rprint_footer\r\nprint_footer\r\n# --- 3. Тестирование основного эндпоинта отправки запроса к AI ---\r\n# --- 3. Тестирование основного эндпоинта отправки запроса к AI ---\rprint_header \"3. Тест отправки запроса к AI (/api/send-request)\"\r\nprint_header \"3. Тест отправки запроса к AI (/api/send-request)\"\r\necho \"3.1. Отправка простого запроса к модели Groq (POST /api/send-request)\"\r\necho \"3.1. Отправка простого запроса к модели Groq (POST /api/send-request)\"\rcurl -X POST \"${BASE_URL}/api/send-request\" \\\r\ncurl -X POST \"${BASE_URL}/api/send-request\" \\\r-H \"${HEADER_CONTENT_TYPE}\" \\\r\n-H \"${HEADER_CONTENT_TYPE}\" \\\r-d '{\r\n-d '{\b\"model\": \"llama3-8b-8192\",\r\n    \"model\": \"llama3-8b-8192\",\"provider\": \"groq\",\r\n    \"provider\": \"groq\",\"prompt\": \"You are a helpful assistant.\",\r\n    \"prompt\": \"You are a helpful assistant.\",\"inputText\": \"What is the capital of France? Answer in one word.\",\r\n    \"inputText\": \"What is the capital of France? Answer in one word.\",\"saveResponse\": false\r\n    \"saveResponse\": false\r}'\r\n}'\rprint_footer\r\nprint_footer\r\n# --- 4. Тестирование истории ответов ---\r\n# --- 4. Тестирование истории ответов ---\rprint_header \"4. Тест истории ответов (/api/responses)\"\r\nprint_header \"4. Тест истории ответов (/api/responses)\"\r\necho \"4.1. Получение последних 5 записей из истории (GET /api/responses)\"\r\necho \"4.1. Получение последних 5 записей из истории (GET /api/responses)\"\recho \"(Должна содержать ответ из предыдущего теста)\"\r\necho \"(Должна содержать ответ из предыдущего теста)\"\rcurl -X GET \"${BASE_URL}/api/responses?limit=5\" -H \"${HEADER_ACCEPT}\"\r\ncurl -X GET \"${BASE_URL}/api/responses?limit=5\" -H \"${HEADER_ACCEPT}\"\rprint_footer\r\nprint_footer\r\n# --- 5. Базовые тесты для RAG API ---\r\n# --- 5. Базовые тесты для RAG API ---\rprint_header \"5. Базовые тесты для RAG API\"\r\nprint_header \"5. Базовые тесты для RAG API\"\r\necho \"5.1. Получение списка контекстных кодов (GET /api/rag/context-codes)\"\r\necho \"5.1. Получение списка контекстных кодов (GET /api/rag/context-codes)\"\rcurl -X GET \"${BASE_URL}/api/rag/context-codes\" -H \"${HEADER_ACCEPT}\"\r\ncurl -X GET \"${BASE_URL}/api/rag/context-codes\" -H \"${HEADER_ACCEPT}\"\rprint_footer\r\nprint_footer\r\necho \"5.2. Получение списка документов (GET /api/rag/documents)\"\r\necho \"5.2. Получение списка документов (GET /api/rag/documents)\"\rcurl -X GET \"${BASE_URL}/api/rag/documents\" -H \"${HEADER_ACCEPT}\"\r\ncurl -X GET \"${BASE_URL}/api/rag/documents\" -H \"${HEADER_ACCEPT}\"\rprint_footer\r\nprint_footer\r\n\nprint_header \"Все тесты завершены!\"",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224",
    "stdin_id": "3ce3a5d2-912c-47d3-ab20-af106ec9396a"
  },
  {
    "id": "85da64d9-936e-4378-a8a8-02dd73832099",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T17:04:42.616Z",
    "type": "stdin",
    "executed_command": "bash ./test_curl.sh",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224"
  },
  {
    "id": "c516b2fe-12f8-44a8-bd7c-bfe85ba64099",
    "sessionId": "8145e0f4-0766-42e0-bfa8-a61d557e199d",
    "timestamp": "2025-09-02T17:04:42.975Z",
    "type": "stdout",
    "terminal_output": "nano test_curl.sh\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\bbash ./test_curl.sh \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\bPnano test_curl.sh\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\bbash ./test_curl.sh \r\n\r\r\n==============================================================================\r\n 1. Тесты состояния сервера и конфигурации\r\n==============================================================================\r\n\r\n1.1. Запрос информации о сервере (GET /server-info)\r\n{\"hostname\":\"DESKTOP-QBT4OQT\",\"platform\":\"win32\",\"arch\":\"x64\",\"nodeVersion\":\"v20.16.0\",\"uptime\":6658844.531,\"baseUrl\":\"http://192.168.1.254:3002\",\"port\":\"3002\",\"appName\":\"AI Analytics Interface\",\"timestamp\":\"2025-09-02T17:04:42.653Z\"}./test_curl.sh: line 41: print_footerecho: command not found\r\n{\"server\":{\"port\":\"3002\",\"nodeEnv\":\"development\",\"isTestMode\":false},\"n8n\":{},\"apiKey\":\"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\",\"groqKey\":\"***\",\"providers\":{\"openroute\":true,\"groq\":true},\"logging\":{\"level\":\"info\",\"filename\":\"combined.log\",\"errorFilename\":\"error.log\"},\"langchainPg\":{\"baseUrl\":\"http://localhost:3005\",\"enabled\":true}}\r\n------------------------------------------------------------------------------\r\n\r\n1.3. Запрос списка всех доступных моделей (GET /api/all-models)\r\n[{\"name\":\"openai/gpt-oss-20b\",\"visible_name\":\"🚀 GROQ: GPT OSS 20B\",\"provider\":\"groq\",\"context\":131072,\"fast\":true,\"max_output_tokens\":65536,\"input_cost\":0.1,\"output_cost\":0.5,\"showInApi\":true,\"use_in_ui\":true},{\"name\":\"openai/gpt-oss-120b\",\"visible_name\":\"🚀 GROQ: GPT OSS 120B\",\"provider\":\"groq\",\"context\":131072,\"fast\":true,\"max_output_tokens\":65536,\"input_cost\":0.15,\"output_cost\":0.75,\"showInApi\":true,\"use_in_ui\":true},{\"name\":\"llama-3.3-70b-versatile\",\"visible_name\":\"🚀 GROQ: Llama 3.3 70B (Versatile)\",\"provider\":\"groq\",\"context\":8192,\"fast\":true,\"showInApi\":true,\"use_in_ui\":true},{\"name\":\"llama3-8b-8192\",\"visible_name\":\"🚀 GROQ: Llama 3 8B\",\"provider\":\"groq\",\"context\":8192,\"fast\":true,\"showInApi\":true,\"use_in_ui\":true},{\"name\":\"llama3-70b-8192\",\"visible_name\":\"🚀 GROQ: Llama 3 70B\",\"provider\":\"groq\",\"context\":8192,\"fast\":true,\"showInApi\":true,\"use_in_ui\":true},{\"name\":\"mixtral-8x7b-32768\",\"visible_name\":\"🚀 GROQ: Mixtral 8x7B\",\"provider\":\"groq\",\"context\":32768,\"fast\":true,\"showInApi\":true,\"use_in_ui\":true},{\"name\":\"gemma2-9b-it\",\"visible_name\":\"🚀 GROQ: Gemma 2 9B\",\"provider\":\"groq\",\"context\":8192,\"fast\":true,\"showInApi\":true,\"use_in_ui\":true},{\"name\":\"moonshotai/kimi-dev-72b:free\",\"showInApi\":true,\"visible_name\":\"Ок - moonshotai/kimi-dev-72b:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"moonshotai/kimi-k2:free\",\"showInApi\":true,\"visible_name\":\"Ок! moonshotai/kimi-k2:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"mistralai/mistral-small-3.2-24b-instruct:free\",\"showInApi\":true,\"visible_name\":\"Ok! mistralai/mistral-small-3.2-24b-instruct:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"google/gemini-2.5-pro-exp-03-25\",\"showInApi\":true,\"visible_name\":\"-- google/gemini-2.5-pro-exp-03-25\",\"use_in_ui\":false,\"provider\":\"openroute\"},{\"name\":\"google/gemma-3-27b-it:free\",\"showInApi\":true,\"visible_name\":\"ОК! gemma-3-27b-it:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"google/gemini-2.0-flash-exp:free\",\"showInApi\":true,\"visible_name\":\"google/gemini-2.0-flash-exp:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"google/gemini-2.0-flash-lite-preview-02-05:free\",\"showInApi\":true,\"visible_name\":\"google/gemini-2.0-flash-lite-preview-02-05:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"google/gemini-2.0-flash-thinking-exp-1219:free\",\"showInApi\":true,\"visible_name\":\"google/gemini-2.0-flash-thinking-exp-1219:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"google/gemini-2.0-pro-exp-02-05:free\",\"showInApi\":true,\"visible_name\":\"google/gemini-2.0-pro-exp-02-05:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"google/gemini-2.0-flash-thinking-exp:free\",\"showInApi\":true,\"visible_name\":\"google/gemini-2.0-flash-thinking-exp:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"deepseek/deepseek-chat:free\",\"showInApi\":true,\"visible_name\":\"Ok! deepseek/deepseek-chat:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"deepseek/deepseek-r1-zero:free\",\"showInApi\":true,\"visible_name\":\"deepseek/deepseek-r1-zero:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"deepseek/deepseek-r1-distill-llama-70b:free\",\"showInApi\":true,\"visible_name\":\"deepseek/deepseek-r1-distill-llama-70b:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"deepseek/deepseek-r1:free\",\"showInApi\":true,\"visible_name\":\"deepseek/deepseek-r1:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"qwen/qwq-32b:free\",\"showInApi\":true,\"visible_name\":\"ОК! qwen/qwq-32b:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"qwen/qwen2.5-vl-72b-instruct:free\",\"showInApi\":true,\"visible_name\":\"qwen/qwen2.5-vl-72b-instruct:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"moonshotai/moonlight-16b-a3b-instruct:free\",\"showInApi\":true,\"visible_name\":\"moonshotai/moonlight-16b-a3b-instruct:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"nousresearch/deephermes-3-llama-3-8b-preview:free\",\"showInApi\":true,\"visible_name\":\"nousresearch/deephermes-3-llama-3-8b-preview:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"cognitivecomputations/dolphin3.0-r1-mistral-24b:free\",\"showInApi\":true,\"visible_name\":\"cognitivecomputations/dolphin3.0-r1-mistral-24b:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"cognitivecomputations/dolphin3.0-mistral-24b:free\",\"showInApi\":true,\"visible_name\":\"cognitivecomputations/dolphin3.0-mistral-24b:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"sophosympatheia/rogue-rose-103b-v0.2:free\",\"showInApi\":true,\"visible_name\":\"sophosympatheia/rogue-rose-103b-v0.2:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"qwen/qwen-2.5-coder-32b-instruct:free\",\"showInApi\":true,\"visible_name\":\"qwen/qwen-2.5-coder-32b-instruct:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"nvidia/llama-3.1-nemotron-70b-instruct:free\",\"showInApi\":true,\"visible_name\":\"nvidia/llama-3.1-nemotron-70b-instruct:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"gryphe/mythomax-l2-13b:free\",\"showInApi\":true,\"visible_name\":\"gryphe/mythomax-l2-13b:free\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"google/gemini-2.5-pro-exp-03-25\",\"showInApi\":false,\"visible_name\":\"google/gemini-2.5-pro-exp-03-25\",\"use_in_ui\":true,\"provider\":\"openroute\"},{\"name\":\"(self-moderated) anthropic/claude-3.7-sonnet:beta\",\"showInApi\":false,\"visible_name\":\"(self-moderated) anthropic/claude-3.7-sonnet:beta\",\"use_in_ui\":true,\"provider\":\"openroute\"}]\r\n------------------------------------------------------------------------------\r\n\r\n\r\n==============================================================================\r\n 2. Тесты CRUD для Промптов\r\n==============================================================================\r\n\r\n2.1. Создание нового промпта (POST /api/prompts)\r\n{\"message\":\"Prompt added successfully\"}\r\n------------------------------------------------------------------------------\r\n\r\n2.2. Получение списка всех промптов для проверки (GET /api/prompts)\r\n[{\"name\":\"task  Задание для обработки команд управления задачами\",\"text\":\"# Задание для обработки команд управления задачами\\n\\n## Доступные команды\\n1. Вывести список задач\\n   - ID команды: 1\\n   - Параметры: нет\\n\\n2. Создать задачу\\n   - ID команды: 2\\n   - Параметры: task_name (название задачи)\\n\\n3. Закрыть задачу\\n   - ID команды: 3\\n   - Параметры: task_name (название задачи)\\n\\n## Формат ответа\\nВаша задача - проанализировать входной текст пользователя и определить:\\n- Какая команда запрашивается (id_cmd)\\n- Какие параметры предоставлены (task_name, если применимо)\\n\\nОтвет должен быть представлен в формате JSON со следующей структурой:\\n\\n{\\n    \\\"id_cmd\\\": <номер команды>,\\n    \\\"task_name\\\": \\\"<название задачи>\\\" // только для команд 2 и 3\\n}\\n\\n### Требования\\n1. Выходной текст должен быть чистым текстом в формате JSON.\\n2. Не используй Markdown-разметку (никаких json , ``, **, * и т.д.).\\n3. Вывод должен быть строго в формате JSON, без дополнительных символов или комментариев.\\n4. Входные строки начинающиеся с трех тире(---) считаем коментириями, их не анализируем как команду.\\n\\n\\n## Примеры\\n\\n### Пример 1\\nВходной текст: \\\"Добавь задачу - Сходить в магазин\\\"\\nОтвет:\\n{\\n    \\\"id_cmd\\\": 2,\\n    \\\"task_name\\\": \\\"Сходить в магазин\\\"\\n}\\n\\n### Пример 2\\nВходной текст: \\\"Покажи список задач\\\"\\nОтвет:\\n{\\n    \\\"id_cmd\\\": 1\\n}\"},{\"name\":\"pm2\",\"text\":\"Ты — AI-помощник для работы с PM2. Твоя задача — превращать человеческие запросы в корректные команды PM2.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<команда PM2>\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи статус\\nОтвет:\\n# Ваш запрос: Покажи статус  \\npm2 status\\n\\nЗапрос:\\nПокажи мне логи задания test_https\\nОтвет:\\n# Ваш запрос: Покажи мне логи задания test_https  \\npm2 logs test_https\\n\\nЗапрос:\\nПерезапусти процесс api_server\\nОтвет:\\n# Ваш запрос: Перезапусти процесс api_server  \\npm2 restart api_server\\n\\nЗапрос:\\nОстанови все процессы\\nОтвет:\\n# Ваш запрос: Останови все процессы  \\npm2 stop all\\n\\nЗапрос:\\nДобавь процесс my_app с файлом server.js\\nОтвет:\\n# Ваш запрос: Добавь процесс my_app с файлом server.js  \\npm2 start server.js --name my_app\\n\\nЗапрос:\\nУдали процесс worker\\nОтвет:\\n# Ваш запрос: Удали процесс worker  \\npm2 delete worker\\n\\nПравила:\\n\\nВсегда возвращай только одну команду.\\nЕсли запрос неясен, предложи уточняющий вариант команды.\\nЕсли пользователь спрашивает про справку, используй pm2 -h.\\nЕсли запрос не относится к PM2, напиши \\\"command unknown\\\".\\nНе используй Markdown-разметку (никаких json , ``, **, * и т.д.).\\nВывод должен быть строго в формате JSON, без дополнитель��ых символов или комментариев.\\nВходные строки начинающиеся с трех тире(---) считаем коментириями, их не анализируем как команду.\"},{\"name\":\"Linux Команды\",\"text\":\"Ты — AI-помощник для работы с Linux. Твоя задача — превращать человеческие запросы в корректные команды linux.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<команда linux>\\n\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи содержимое директории\\nОтвет:\\n# Ваш запрос: Покажи содержимое директории  \\nls -la\\n\\nПравила:\\n\\nВсегда возвращай только одну команду.\\nЕсли запрос неясен, предложи уточняющий вариант команды.\\nЕсли пользователь спрашивает про справку, используй pm2 -h.\\nЕсли запрос не относится к PM2, напиши \\\"command unknown\\\".\\nНе используй Markdown-разметку (никаких json , ``, **, * и т.д.).\\nВывод должен быть строго в формате JSON, без дополнительных символов или комментариев.\\nВходные строки начинающиеся с трех тире(---) считаем коментириями, их не анализируем как команду.\"},{\"name\":\"Linux: Просто помошник .\",\"text\":\"Ты — AI-помощник для работы с Linux.\"},{\"name\":\"Пустой sys промпт\",\"text\":\"1\"},{\"name\":\"Разработчик Postgresql\",\"text\":\"ТЫ крутой разработчик на Postgresql.\"},{\"name\":\"Системный Аналитик и коллега\",\"text\":\"Выступай в роли Системного Аналитика в области IT, с навыками разработки систем на NodeJs и Javascript? а так же и как мой коллега. Давай обсудим некоторые мои идеи. Жду от тебя аопросов и конструктивной критики. Какие положительные моменты ты видишь, а какие недостатки. Вместе мы должны решить, стоит ли развивать идею или нет.\"},{\"name\":\"docker\",\"text\":\"Ты — AI-помощник для работы с docker. Твоя задача — превращать человеческие запросы в корректные команды docker.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<команда PM2>\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи выполняющиеся образы\\nОтвет:\\n# Ваш запрос: Покажи выполняющиеся образы\\ndockerps\"},{\"name\":\"Опытный разработчик NodeJs Javascript\",\"text\":\"Ты опытный разработчик NodeJs Javascript.\"},{\"name\":\"Просто для болтовни\",\"text\":\".\"},{\"name\":\"Простое приложение NodeJs.\",\"text\":\"Ты опытный разработчик NodeJs Javascript.\\nСоздай простое приложение с сервером server.js и интерфейсом пользователя на чистой Javascript.\"},{\"name\":\"tmp_prompt\",\"text\":\"Always answer \\\"no\\\"\"},{\"name\":\"PostgreSQL команд\",\"text\":\"Ты — AI-помощник для работы с PostgreSQL. Твоя задача — превращать человеческие запросы в корректные запросы PostgreSQL. Запросы о структуре  объектов БД нужно брать из information_schema.\\n\\nДля запроса структуры объектов Нужно сформировать ответ так, чтобы резуль��ат был в виде sql команды CREATE ... \\nУчитывай схему в которой объект.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<запрос в БД PostgreSQL>\\n\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи структуру таблицы auction .\\n\\nОтвет:\\nSELECT\\n    'CREATE TABLE carl_data.auction (' AS create_table_stmt\\nUNION ALL\\nSELECT\\n    string_agg(\\n            column_definition,\\n            ', '\\n    )\\nFROM (\\n    SELECT\\n        column_name || ' ' ||\\n        data_type ||\\n        COALESCE('(' || character_maximum_length || ')', '') ||\\n        CASE\\n            WHEN is_nullable = 'NO' THEN ' NOT NULL'\\n            ELSE ''\\n            END ||\\n        COALESCE(' DEFAULT ' || column_default, '') AS column_definition\\n    FROM\\n        information_schema.columns\\n    WHERE\\n        table_name = 'auction'\\n            AND table_schema = 'carl_data'\\n    ORDER BY\\n        ordinal_position\\n) AS columns\\nUNION ALL\\nSELECT\\n    ');';\"},{\"name\":\"Obsidian\",\"text\":\"Нужны советы по Obsidian\"},{\"name\":\"Объясни логику PLPGSQL функции\",\"text\":\"Ты опытный разработчик на Postgresql, SQL, PLPGSQL.\\nОбъясни логику функции приведенной нижею Если есть вопросы - задавай.\\n\\n--- Текст функции:\"},{\"name\":\"Автомобили.\",\"text\":\"Автомобили.\\n\\nКакаие популярные марки грузовых автомобилей ты знаешь?\\nВыведи только список названий всех. Только названия без любой дополнительной информации.\"},{\"name\":\"Автомобили. марки легковых. json\",\"text\":\"Автомобили. марки легковых. json \\n\\nКакаие популярные марки легковых автомобилей ты знаешь?\\nВыведи только список названий марок желательно всех, которые известны. Только названия без любой дополнительной информации. В виде json  [{ \\\"mark\\\":\\\"Volvo\\\" }, {} ]\"},{\"name\":\"prompt_name_1\",\"text\":\"Это обновленный тестовый системный промпт.\"},{\"name\":\"test_prompt_1756832682\",\"text\":\"Это тестовый системный промпт.\"}]\r\n------------------------------------------------------------------------------\r\n\r\n2.3. Обновление промпта (PUT /api/prompts/:name)\r\n{\"message\":\"Prompt updated successfully\"}\r\n------------------------------------------------------------------------------\r\n\r\n2.4. Повторное получение списка для проверки обновления\r\n[{\"name\":\"task  Задание для обработки команд управления задачами\",\"text\":\"# Задание для обработки команд управления задачами\\n\\n## Доступные команды\\n1. Вывести список задач\\n   - ID команды: 1\\n   - Параметры: нет\\n\\n2. Создать задачу\\n   - ID команды: 2\\n   - Параметры: task_name (название задачи)\\n\\n3. Закрыть задачу\\n   - ID команды: 3\\n   - Параметры: task_name (название задачи)\\n\\n## Формат ответа\\nВаша задача - проанализировать входной текст пользователя и определить:\\n- Какая команда запрашивается (id_cmd)\\n- Какие параметры предоставлены (task_name, если применимо)\\n\\nОтвет должен быть представлен в формате JSON со следующей структурой:\\n\\n{\\n    \\\"id_cmd\\\": <номер команды>,\\n    \\\"task_name\\\": \\\"<название задачи>\\\" // только для команд 2 и 3\\n}\\n\\n### Требования\\n1. Выходной текст должен быть чистым текстом в формате JSON.\\n2. Не используй Markdown-разметку (никаких json , ``, **, * и т.д.).\\n3. Вывод должен быть строго в формате JSON, без дополнительных символов или комментариев.\\n4. Входные строки начинающиеся с трех тире(---) считаем коментириями, их не анализируем как команду.\\n\\n\\n## Примеры\\n\\n### Пример 1\\nВходной текст: \\\"Добавь задачу - Сходить в магазин\\\"\\nОтвет:\\n{\\n    \\\"id_cmd\\\": 2,\\n    \\\"task_name\\\": \\\"Сходить в магазин\\\"\\n}\\n\\n### Пример 2\\nВходной текст: \\\"Покажи список задач\\\"\\nОтвет:\\n{\\n    \\\"id_cmd\\\": 1\\n}\"},{\"name\":\"pm2\",\"text\":\"Ты — AI-помощник для работы с PM2. Твоя задача — превращать человеческие запросы в корректные команды PM2.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<команда PM2>\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи статус\\nОтвет:\\n# Ваш запрос: Покажи статус  \\npm2 status\\n\\nЗапрос:\\nПокажи мне логи задания test_https\\nОтвет:\\n# Ваш запрос: Покажи мне логи задания test_https  \\npm2 logs test_https\\n\\nЗапрос:\\nПерезапусти процесс api_server\\nОтвет:\\n# Ваш запрос: Перезапусти процесс api_server  \\npm2 restart api_server\\n\\nЗапрос:\\nОстанови все процессы\\nОтвет:\\n# Ваш запрос: Останови все процессы  \\npm2 stop all\\n\\nЗапрос:\\nДобавь процесс my_app с файлом server.js\\nОтвет:\\n# Ваш запрос: Добавь процесс my_app с файлом server.js  \\npm2 start server.js --name my_app\\n\\nЗапрос:\\nУдали процесс worker\\nОтвет:\\n# Ваш запрос: Удали процесс worker  \\npm2 delete worker\\n\\nПравила:\\n\\nВсегда возвращай только одну команду.\\nЕсли запрос неясен, предложи уточняющий вариант команды.\\nЕсли пользователь спрашивает про справку, используй pm2 -h.\\nЕсли запрос не относится к PM2, напиши \\\"command unknown\\\".\\nНе используй Markdown-разметку (никаких json , ``, **, * и т.д.).\\nВывод должен быть строго в формате JSON, без дополнительных символов или комментариев.\\nВходные строки начинающиеся с трех тире(---) считаем коментириями, их не анализируем как команду.\"},{\"name\":\"Linux Команды\",\"text\":\"Ты — AI-помощник для работы с Linux. Твоя задача — превращать человеческие запросы в корректные команды linux.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<команда linux>\\n\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи содержимое директории\\nОтвет:\\n# Ваш запрос: Покажи содержимое директории  \\nls -la\\n\\nПравила:\\n\\nВсегда возвращай только одну команду.\\nЕсли запрос неясен, предложи уточняющий вариант команды.\\nЕсли пользователь спрашивает про справку, используй pm2 -h.\\nЕсли запрос не относится к PM2, напиши \\\"command unknown\\\".\\nНе используй Markdown-разметку (никаких json , ``, **, * и т.д.).\\nВывод должен быть строго в формате JSON, без дополнительных символов или комментариев.\\nВходные строки начинающиеся с трех тире(---) считаем коментириями, их не анализируем как команду.\"},{\"name\":\"Linux: Просто помошник .\",\"text\":\"Ты — AI-помощник для работы с Linux.\"},{\"name\":\"Пустой sys промпт\",\"text\":\"1\"},{\"name\":\"Разработчик Postgresql\",\"text\":\"ТЫ крутой разработчик на Postgresql.\"},{\"name\":\"Системный Аналитик и коллега\",\"text\":\"Выступай в роли Системного Аналитика в области IT, с навыками разработки систем на NodeJs и Javascript? а так же и как мой коллега. Давай обсудим некоторые мои идеи. Жду от тебя аопросов и конструктивной критики. Какие положительные моменты ты видишь, а какие недостатки. Вместе мы должны решить, стоит ли развивать идею или нет.\"},{\"name\":\"docker\",\"text\":\"Ты — AI-помощник для работы с docker. Твоя задача — превращать человеческие запросы в корректные команды docker.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<команда PM2>\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи выполняющиеся образы\\nОтвет:\\n# Ваш запрос: Покажи выполняющиеся образы\\ndockerps\"},{\"name\":\"Опытный разработчик NodeJs Javascript\",\"text\":\"Ты опытный разработчик NodeJs Javascript.\"},{\"name\":\"Просто для болтовни\",\"text\":\".\"},{\"name\":\"Простое приложение NodeJs.\",\"text\":\"Ты опытный разработчик NodeJs Javascript.\\nСоздай простое приложение с сервером server.js и интерфейсом пользователя на чистой Javascript.\"},{\"name\":\"tmp_prompt\",\"text\":\"Always answer \\\"no\\\"\"},{\"name\":\"PostgreSQL команд\",\"text\":\"Ты — AI-помощник для работы с PostgreSQL. Твоя задача — превращать человеческие запросы в корректные запросы PostgreSQL. Запросы о структуре  объектов БД нужно брать из information_schema.\\n\\nДля запроса структуры объектов Нужно сформировать ответ так, чтобы результат был в виде sql команды CREATE ... \\nУчитывай схему в которой объект.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<запрос в БД PostgreSQL>\\n\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи структуру таблицы auction .\\n\\nОтвет:\\nSELECT\\n    'CREATE TABLE carl_data.auction (' AS create_table_stmt\\nUNION ALL\\nSELECT\\n    string_agg(\\n            column_definition,\\n            ', '\\n    )\\nFROM (\\n    SELECT\\n        column_name || ' ' ||\\n        data_type ||\\n        COALESCE('(' || character_maximum_length || ')', '') ||\\n        CASE\\n            WHEN is_nullable = 'NO' THEN ' NOT NULL'\\n            ELSE ''\\n            END ||\\n        COALESCE(' DEFAULT ' || column_default, '') AS column_definition\\n    FROM\\n        information_schema.columns\\n    WHERE\\n        table_name = 'auction'\\n            AND table_schema = 'carl_data'\\n    ORDER BY\\n        ordinal_position\\n) AS columns\\nUNION ALL\\nSELECT\\n    ');';\"},{\"name\":\"Obsidian\",\"text\":\"Нужны советы по Obsidian\"},{\"name\":\"Объясни логику PLPGSQL функции\",\"text\":\"Ты опытный разработчик на Postgresql, SQL, PLPGSQL.\\nОбъясни логику функции приведенной нижею Если есть вопросы - задавай.\\n\\n--- Текст функции:\"},{\"name\":\"Автомобили.\",\"text\":\"Автомобили.\\n\\nКакаие популярные марки грузовых автомобилей ты знаешь?\\nВыведи только список названий всех. Только названия без любой дополнительной информации.\"},{\"name\":\"Автомобили. марки легковых. json\",\"text\":\"Автомобили. марки легковых. json \\n\\nКакаие популярные марки легковых автомобилей ты знаешь?\\nВыведи только список названий марок желательно всех, которые известны. Только названия без любой дополнительной информации. В виде json  [{ \\\"mark\\\":\\\"Volvo\\\" }, {} ]\"},{\"name\":\"prompt_name_1\",\"text\":\"Это обновленный тестовый системный промпт.\"},{\"name\":\"test_prompt_1756832682\",\"text\":\"Это обновленный тестовый системный промпт.\"}]\r\n------------------------------------------------------------------------------\r\n\r\n2.5. Удаление промпта (DELETE /api/prompts/:name)\r\n{\"message\":\"Prompt deleted successfully\"}\r\n------------------------------------------------------------------------------\r\n\r\n2.6. Финальная проверка списка промптов\r\n[{\"name\":\"task  Задание для обработки команд управления задачами\",\"text\":\"# Задание для обработки команд управления задачами\\n\\n## Доступные команды\\n1. Вывести список задач\\n   - ID команды: 1\\n   - Параметры: нет\\n\\n2. Создать задачу\\n   - ID команды: 2\\n   - Параметры: task_name (название задачи)\\n\\n3. Закрыть задачу\\n   - ID команды: 3\\n   - Параметры: task_name (название задачи)\\n\\n## Формат ответа\\nВаша задача - проанализировать входной текст пользователя и определить:\\n- Какая команда запрашивается (id_cmd)\\n- Какие параметры предоставлены (task_name, если применимо)\\n\\nОтвет должен быть представлен в формате JSON со следующей структурой:\\n\\n{\\n    \\\"id_cmd\\\": <номер команды>,\\n    \\\"task_name\\\": \\\"<название задачи>\\\" // только для команд 2 и 3\\n}\\n\\n### Требования\\n1. Выходной текст должен быть чистым текстом в формате JSON.\\n2. Не используй Markdown-разметку (никаких json , ``, **, * и т.д.).\\n3. Вывод должен быть строго в формате JSON, без дополнительных символов или комментариев.\\n4. Входные строки начинающиеся с трех тире(---) считаем коментириями, их не анализируем как команду.\\n\\n\\n## Примеры\\n\\n### Пример 1\\nВходной текст: \\\"Добавь задачу - Сходить в магазин\\\"\\nОтвет:\\n{\\n    \\\"id_cmd\\\": 2,\\n    \\\"task_name\\\": \\\"Сходить в магазин\\\"\\n}\\n\\n### Пример 2\\nВходной текст: \\\"Покажи список задач\\\"\\nОтвет:\\n{\\n    \\\"id_cmd\\\": 1\\n}\"},{\"name\":\"pm2\",\"text\":\"Ты — AI-помощник для работы с PM2. Твоя задача — превращать человеческие запросы в корректные команды PM2.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<команда PM2>\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи статус\\nОтвет:\\n# Ваш запрос: Покажи статус  \\npm2 status\\n\\nЗапрос:\\nПокажи мне логи задания test_https\\nОтвет:\\n# Ваш запрос: Покажи мне логи задания test_https  \\npm2 logs test_https\\n\\nЗапрос:\\nПерезапусти процесс api_server\\nОтвет:\\n# Ваш запрос: Перезапусти процесс api_server  \\npm2 restart api_server\\n\\nЗапрос:\\nОстанови все процессы\\nОтвет:\\n# Ваш запрос: Останови все процессы  \\npm2 stop all\\n\\nЗапрос:\\nДобавь процесс my_app с файлом server.js\\nОтвет:\\n# Ваш запрос: Добавь процесс my_app с файлом server.js  \\npm2 start server.js --name my_app\\n\\nЗапрос:\\nУдали процесс worker\\nОтвет:\\n# Ваш запрос: Удали процесс worker  \\npm2 delete worker\\n\\nПравила:\\n\\nВсегда возвращай только одну команду.\\nЕсли запрос неясен, предложи уточняющий вариант команды.\\nЕсли пользователь спрашивает про справку, используй pm2 -h.\\nЕсли запрос не относится к PM2, напиши \\\"command unknown\\\".\\nНе используй Markdown-разметку (никаких json , ``, **, * и т.д.).\\nВывод должен быть строго в формате JSON, без дополнитель��ых символов или комментариев.\\nВходные строки начинающиеся с трех тире(---) считаем коментириями, их не анализируем как команду.\"},{\"name\":\"Linux Команды\",\"text\":\"Ты — AI-помощник для работы с Linux. Твоя задача — превращать человеческие запросы в корректные команды linux.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<команда linux>\\n\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи содержимое директории\\nОтвет:\\n# Ваш запрос: Покажи содержимое директории  \\nls -la\\n\\nПравила:\\n\\nВсегда возвращай только одну команду.\\nЕсли запрос неясен, предложи уточняющий вариант команды.\\nЕсли пользователь спрашивает про справку, используй pm2 -h.\\nЕсли запрос не относится к PM2, напиши \\\"command unknown\\\".\\nНе используй Markdown-разметку (никаких json , ``, **, * и т.д.).\\nВывод должен быть строго в формате JSON, без дополнительных символов или комментариев.\\nВходные строки начинающиеся с трех тире(---) считаем коментириями, их не анализируем как команду.\"},{\"name\":\"Linux: Просто помошник .\",\"text\":\"Ты — AI-помощник для работы с Linux.\"},{\"name\":\"Пустой sys промпт\",\"text\":\"1\"},{\"name\":\"Разработчик Postgresql\",\"text\":\"ТЫ крутой разработчик на Postgresql.\"},{\"name\":\"Системный Аналитик и коллега\",\"text\":\"Выступай в роли Системного Аналитика в области IT, с навыками разработки систем на NodeJs и Javascript? а так же и как мой коллега. Давай обсудим некоторые мои идеи. Жду от тебя аопросов и конструктивной критики. Какие положительные моменты ты видишь, а какие недостатки. Вместе мы должны решить, стоит ли развивать идею или нет.\"},{\"name\":\"docker\",\"text\":\"Ты — AI-помощник для работы с docker. Твоя задача — превращать человеческие запросы в корректные команды docker.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<команда PM2>\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи выполняющиеся образы\\nОтвет:\\n# Ваш запрос: Покажи выполняющиеся образы\\ndockerps\"},{\"name\":\"Опытный разработчик NodeJs Javascript\",\"text\":\"Ты опытный разработчик NodeJs Javascript.\"},{\"name\":\"Просто для болтовни\",\"text\":\".\"},{\"name\":\"Простое приложение NodeJs.\",\"text\":\"Ты опытный разработчик NodeJs Javascript.\\nСоздай простое приложение с сервером server.js и интерфейсом пользователя на чистой Javascript.\"},{\"name\":\"tmp_prompt\",\"text\":\"Always answer \\\"no\\\"\"},{\"name\":\"PostgreSQL команд\",\"text\":\"Ты — AI-помощник для работы с PostgreSQL. Твоя задача — превращать человеческие запросы в корректные запросы PostgreSQL. Запросы о структуре  объектов БД нужно брать из information_schema.\\n\\nДля запроса структуры объектов Нужно сформировать ответ так, чтобы резуль��ат был в виде sql команды CREATE ... \\nУчитывай схему в которой объект.\\n\\nФормат ответа:\\n# Ваш запрос: <запрос пользователя>\\n<запрос в БД PostgreSQL>\\n\\n\\nПримеры:\\n\\nЗапрос:\\nПокажи структуру таблицы auction .\\n\\nОтвет:\\nSELECT\\n    'CREATE TABLE carl_data.auction (' AS create_table_stmt\\nUNION ALL\\nSELECT\\n    string_agg(\\n            column_definition,\\n            ', '\\n    )\\nFROM (\\n    SELECT\\n        column_name || ' ' ||\\n        data_type ||\\n        COALESCE('(' || character_maximum_length || ')', '') ||\\n        CASE\\n            WHEN is_nullable = 'NO' THEN ' NOT NULL'\\n            ELSE ''\\n            END ||\\n        COALESCE(' DEFAULT ' || column_default, '') AS column_definition\\n    FROM\\n        information_schema.columns\\n    WHERE\\n        table_name = 'auction'\\n            AND table_schema = 'carl_data'\\n    ORDER BY\\n        ordinal_position\\n) AS columns\\nUNION ALL\\nSELECT\\n    ');';\"},{\"name\":\"Obsidian\",\"text\":\"Нужны советы по Obsidian\"},{\"name\":\"Объясни логику PLPGSQL функции\",\"text\":\"Ты опытный разработчик на Postgresql, SQL, PLPGSQL.\\nОбъясни логику функции приведенной нижею Если есть вопросы - задавай.\\n\\n--- Текст функции:\"},{\"name\":\"Автомобили.\",\"text\":\"Автомобили.\\n\\nКакаие популярные марки грузовых автомобилей ты знаешь?\\nВыведи только список названий всех. Только названия без любой дополнительной информации.\"},{\"name\":\"Автомобили. марки легковых. json\",\"text\":\"Автомобили. марки легковых. json \\n\\nКакаие популярные марки легковых автомобилей ты знаешь?\\nВыведи только список названий марок желательно всех, которые известны. Только названия без любой дополнительной информации. В виде json  [{ \\\"mark\\\":\\\"Volvo\\\" }, {} ]\"},{\"name\":\"prompt_name_1\",\"text\":\"Это обновленный тестовый системный промпт.\"}](Ожидается пустой результат для тестового промпта)\r\n\r\n------------------------------------------------------------------------------\r\n\r\n\r\n==============================================================================\r\n 3. Тест отправки запроса к AI (/api/send-request)\r\n==============================================================================\r\n\r\n3.1. Отправка простого запроса к модели Groq (POST /api/send-request)\r\n{\"error\":\"GROQ API Error: 404 {\\\"error\\\":{\\\"message\\\":\\\"Not Found\\\"}}\",\"details\":{\"stack\":\"Error: GROQ API Error: 404 {\\\"error\\\":{\\\"message\\\":\\\"Not Found\\\"}}\\n    at GroqService.sendRequest (C:\\\\ERV\\\\projects-ex\\\\aian-model\\\\groq-service.js:65:19)\\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\\n    at async C:\\\\ERV\\\\projects-ex\\\\aian-model\\\\server.js:549:30\"}}\r\n------------------------------------------------------------------------------\r\n\r\n\r\n==============================================================================\r\n 4. Тест истории ответов (/api/responses)\r\n==============================================================================\r\n\r\n4.1. Получение последних 5 записей из истории (GET /api/responses)\r\n(Должна содержать ответ из предыдущего теста)\r\n{\"responses\":[{\"id\":\"1756794440370\",\"timestamp\":\"2025-09-02T06:27:20.370Z\",\"model\":\"moonshotai/kimi-dev-72b:free\",\"provider\":\"openroute\",\"prompt\":\"Context from panel server:\\n# Обращение к DEV(разработческому) серверу postgres на d2(w2)\\r\\npsql -h 192.168.1.12 -U carl -d carlinkng\\r\\n\\r\\n# На команду вида: Смержи main с dev нужно выдать:\\r\\ngit checkout main \\\\ \\r\\ngit merge dev \\\\ \\r\\ngit checkout dev \\r\\n\\r\\n# На команду вида: юникод или utf или utf8 или 65001 выдать:                                \\r\\nchcp 65001\\n\\n---\\n\\nYou are a Linux terminal AI assistant. Convert user requests to shell commands. CRITICAL: Return ONLY the command, no explanations, no text, no markdown. Examples: User: \\\"show files\\\" → Response: \\\"ls -la\\\". User: \\\"check disk space\\\" → Response: \\\"df -h\\\".\",\"inputText\":\"pm2 перезапусти rosmos panel\",\"response\":\"```bash\\npm2 restart rosmos_panel\\n```\",\"tokens\":{\"input\":214,\"output\":13,\"total\":227,\"source\":\"api\"},\"autoSaved\":true},{\"id\":\"1756487652489\",\"timestamp\":\"2025-08-29T17:14:12.489Z\",\"model\":\"moonshotai/kimi-dev-72b:free\",\"provider\":\"openroute\",\"prompt\":\".\",\"inputText\":\"Привет!\\nКакая ты модель?\",\"response\":\"Hi there! I'm an OpenAI chat model, here to help with your questions. What can I do for you today?\",\"tokens\":{\"input\":23,\"output\":27,\"total\":50,\"source\":\"api\"},\"autoSaved\":true},{\"id\":\"1756216787649\",\"timestamp\":\"2025-08-26T13:59:47.649Z\",\"model\":\"moonshotai/kimi-dev-72b:free\",\"provider\":\"openroute\",\"prompt\":\"Context from panel server:\\n# Обращение к DEV(разработческому) серверу postgres на d2(w2)\\r\\npsql -h 192.168.1.12 -U carl -d carlinkng\\r\\n\\r\\n# На команду вида: Смержи main с dev нужно выдать:\\r\\ngit checkout main \\\\ \\r\\ngit merge dev \\\\ \\r\\ngit checkout dev \\r\\n\\r\\n# На команду вида: юникод или utf или utf8 или 65001 выдать:                                \\r\\nchcp 65001\\n\\n---\\n\\nYou are a Linux terminal AI assistant. Convert user requests to shell commands. CRITICAL: Return ONLY the command, no explanations, no text, no markdown. Examples: User: \\\"show files\\\" → Response: \\\"ls -la\\\". User: \\\"check disk space\\\" → Response: \\\"df -h\\\".\",\"inputText\":\"какая версия linux установлена\",\"response\":\"uname -r\",\"tokens\":{\"input\":213,\"output\":4,\"total\":217,\"source\":\"api\"},\"autoSaved\":true},{\"id\":\"1756216578571\",\"timestamp\":\"2025-08-26T13:56:18.571Z\",\"model\":\"moonshotai/kimi-dev-72b:free\",\"provider\":\"openroute\",\"prompt\":\"Context from panel server:\\n# Обращение к DEV(разработческому) серверу postgres на d2(w2)\\r\\npsql -h 192.168.1.12 -U carl -d carlinkng\\r\\n\\r\\n# На команду вида: Смержи main с dev нужно выдать:\\r\\ngit checkout main \\\\ \\r\\ngit merge dev \\\\ \\r\\ngit checkout dev \\r\\n\\r\\n# На команду вида: юникод или utf или utf8 или 65001 выдать:                                \\r\\nchcp 65001\\n\\n---\\n\\nYou are a Linux terminal AI assistant. Convert user requests to shell commands. CRITICAL: Return ONLY the command, no explanations, no text, no markdown. Examples: User: \\\"show files\\\" → Response: \\\"ls -la\\\". User: \\\"check disk space\\\" → Response: \\\"df -h\\\".\",\"inputText\":\"сделать запуск sshd автоматическим\",\"response\":\"systemctl enable sshd\\nsystemctl start sshd\",\"tokens\":{\"input\":213,\"output\":12,\"total\":225,\"source\":\"api\"},\"autoSaved\":true},{\"id\":\"1756198977187\",\"timestamp\":\"2025-08-26T09:02:57.187Z\",\"model\":\"moonshotai/kimi-dev-72b:free\",\"provider\":\"openroute\",\"prompt\":\"Context from panel server:\\n# Обращение к DEV(разработческому) серверу postgres на d2(w2)\\r\\npsql -h 192.168.1.12 -U carl -d carlinkng\\r\\n\\r\\n# На команду вида: Смержи main с dev нужно выдать:\\r\\ngit checkout main \\\\ \\r\\ngit merge dev \\\\ \\r\\ngit checkout dev \\r\\n\\r\\n# На команду вида: юникод или utf или utf8 или 65001 выдать:                                \\r\\nchcp 65001\\n\\n---\\n\\nYou are a Linux terminal AI assistant. Convert user requests to shell commands. CRITICAL: Return ONLY the command, no explanations, no text, no markdown. Examples: User: \\\"show files\\\" → Response: \\\"ls -la\\\". User: \\\"check disk space\\\" → Response: \\\"df -h\\\".\",\"inputText\":\"на каких портах что-то есть ?\",\"response\":\"netstat -tunlp | grep LISTEN\\n\",\"tokens\":{\"input\":214,\"output\":12,\"total\":226,\"source\":\"api\"},\"autoSaved\":true}],\"total\":102,\"offset\":0,\"limit\":5,\"hasMore\":true}\r\n------------------------------------------------------------------------------\r\n\r\n\r\n==============================================================================\r\n 5. Базовые тесты для RAG API\r\n==============================================================================\r\n\r\n5.1. Получение списка контекстных кодов (GET /api/rag/context-codes)\r\n{\"error\":\"Не удалось получить контекстные коды\"}\r\n------------------------------------------------------------------------------\r\n\r\n5.2. Получение списка документов (GET /api/rag/documents)\r\n{\"error\":\"Не удалось получить список документов\"}\r\n------------------------------------------------------------------------------\r\n\r\n\r\n==============================================================================\r\n Все тесты завершены!\r\n==============================================================================",
    "serverId": "WSL-server",
    "serverName": "WSL на моем рабочем компе",
    "serverHost": "172.26.74.224",
    "stdin_id": "85da64d9-936e-4378-a8a8-02dd73832099"
  },
  {
    "id": "b355cb20-4c62-4e84-b9de-41716725ce56",
    "sessionId": "bac46334-127b-4c94-94b9-b8db9a29c549",
    "timestamp": "2025-09-03T08:28:33.451Z",
    "type": "stdout",
    "terminal_output": "Welcome to Ubuntu 24.04.3 LTS (GNU/Linux 6.8.0-71-generic x86_64)\r\n\r\n * Documentation:  https://help.ubuntu.com\r\n * Management:     https://landscape.canonical.com\r\n * Support:        https://ubuntu.com/pro\r\n\r\n System information as of Wed Sep  3 08:27:53 UTC 2025\r\n\r\n  System load:  0.16               Processes:               245\r\n  Usage of /:   2.3% of 491.02GB   Users logged in:         1\r\n  Memory usage: 64%                IPv4 address for ens192: 87.251.79.241\r\n  Swap usage:   41%                IPv6 address for ens192: 2a0d:6c2:7:15::\r\n\r\n\r\nExpanded Security Maintenance for Applications is not enabled.\r\n\r\n5 updates can be applied immediately.\r\nTo see these additional updates run: apt list --upgradable\r\n\r\n1 additional security update can be applied with ESM Apps.\r\nLearn more about enabling ESM Apps service at https://ubuntu.com/esm\r\n\r\n\r\n*** System restart required ***\r\nLast login: Wed Sep  3 05:51:03 2025 from 87.251.79.241",
    "serverId": "usa",
    "serverName": "usa - Мой удаленный сервер",
    "serverHost": "usa"
  },
  {
    "id": "77864f93-0952-4248-b09c-9d84f484250d",
    "sessionId": "bac46334-127b-4c94-94b9-b8db9a29c549",
    "timestamp": "2025-09-03T08:28:35.691Z",
    "type": "stdin",
    "executed_command": "ls",
    "serverId": "usa",
    "serverName": "usa - Мой удаленный сервер",
    "serverHost": "usa"
  },
  {
    "id": "23d72bf7-872b-4f43-a646-3f59b5795573",
    "sessionId": "bac46334-127b-4c94-94b9-b8db9a29c549",
    "timestamp": "2025-09-03T08:28:35.874Z",
    "type": "stdout",
    "terminal_output": "ls\r\n\rMYDATA  git  projects-ex  searxng-docker",
    "serverId": "usa",
    "serverName": "usa - Мой удаленный сервер",
    "serverHost": "usa",
    "stdin_id": "77864f93-0952-4248-b09c-9d84f484250d"
  },
  {
    "id": "d89dd702-e535-4bad-add3-c0c178db27f2",
    "sessionId": "bac46334-127b-4c94-94b9-b8db9a29c549",
    "timestamp": "2025-09-03T08:28:52.704Z",
    "type": "stdin",
    "executed_command": "mc",
    "serverId": "usa",
    "serverName": "usa - Мой удаленный сервер",
    "serverHost": "usa"
  },
  {
    "id": "17cbea12-fb40-4eb8-a3ee-f056482e6884",
    "sessionId": "bac46334-127b-4c94-94b9-b8db9a29c549",
    "timestamp": "2025-09-03T08:28:55.058Z",
    "type": "stdout",
    "terminal_output": "mc",
    "serverId": "usa",
    "serverName": "usa - Мой удаленный сервер",
    "serverHost": "usa",
    "stdin_id": "d89dd702-e535-4bad-add3-c0c178db27f2"
  },
  {
    "id": "8b2b3672-027d-4d4c-a145-69223a637daf",
    "sessionId": "bac46334-127b-4c94-94b9-b8db9a29c549",
    "timestamp": "2025-09-03T08:28:55.306Z",
    "type": "stdout",
    "terminal_output": "┌<─ ~ ────────────────────────────────────────────────.[^]>┐\r\n│.n               Name                │ Size  │Modify time │\r\n│/..                                  │UP--DIR│Aug 20 09:23│\r\n│/.cache                              │   4096│Jul 30 17:35│\r\n│/.config                             │   4096│Aug 13 16:41│\r\n│/.kosmos                             │   4096│Aug 25 14:36│\r\n│/.local                              │   4096│Jul 30 17:35│\r\n│/.npm                                │   4096│Jul 30 18:04│\r\n│/.pm2                                │   4096│Aug 20 09:27│\r\n│/.ssh                                │   4096│Aug 26 10:55│\r\n│/MYDATA                              │   4096│Aug 12 16:45│\r\n│/projects-ex                         │   4096│Aug 20 06:47│\r\n│/searxng-docker                      │   4096│Aug  9 16:11│\r\n│ .bash_history                       │  11161│Aug 29 17:32│\r\n│ .bashrc                             │   3106│Apr 22  2024│\r\n│ .gitconfig                          │     47│Aug 26 10:31│\r\n│ .profile                            │    161│Apr 22  2024│\r\n│ .python_history                     │      0│Aug  5 18:02│\r\n│ .selected_editor                    │     66│Jul 30 17:48│\r\n│ git                                 │      0│Aug  5 17:53│\r\n│                                     │       │            │\r\n│                                     │       │            │\r\n│                                     │       │            │\r\n├──────────────────────────────────────────────────────────┤\r\n│UP--DIR                                                   │\r\n└────────────────────────────────────── 480G / 491G (97%) ─┘\r\nHint: Tab changes your current panel.",
    "serverId": "usa",
    "serverName": "usa - Мой удаленный сервер",
    "serverHost": "usa"
  },
  {
    "id": "af239b22-b438-4572-920a-bf63745f519c",
    "sessionId": "bac46334-127b-4c94-94b9-b8db9a29c549",
    "timestamp": "2025-09-03T08:29:00.432Z",
    "type": "stdin",
    "executed_command": "[^]",
    "serverId": "usa",
    "serverName": "usa - Мой удаленный сервер",
    "serverHost": "usa"
  },
  {
    "id": "1550876a-17f9-43ef-8981-f9e782d2ecb9",
    "sessionId": "bac46334-127b-4c94-94b9-b8db9a29c549",
    "timestamp": "2025-09-03T08:30:04.718Z",
    "type": "stdin",
    "executed_command": "Выполняем слияние изменений",
    "serverId": "usa",
    "serverName": "usa - Мой удаленный сервер",
    "serverHost": "usa"
  },
  {
    "id": "3540dde4-12ef-49aa-8290-a7d892a9402a",
    "sessionId": "bac46334-127b-4c94-94b9-b8db9a29c549",
    "timestamp": "2025-09-03T08:32:21.503Z",
    "type": "stdin",
    "executed_command": "Выполняем слияние изменений",
    "serverId": "usa",
    "serverName": "usa - Мой удаленный сервер",
    "serverHost": "usa"
  },
  {
    "id": "4d3b7fab-1155-4e4f-b2f9-18297eed7d26",
    "sessionId": "bac46334-127b-4c94-94b9-b8db9a29c549",
    "timestamp": "2025-09-03T08:32:24.971Z",
    "type": "stdout",
    "terminal_output": "Left     File     Command     Options     Right                                                                       ┌<─ ~/projects-ex ────────────────────────────────────.[^]>┐┌<─ ~ ────────────────────────────────────────────────.[^]>/│.n               Name                │ Size  │Modify time ││.n               Name                │ Size  │Modify time ││/..                                  │UP--DIR│Aug 26 10:31││/..                                  │UP--DIR│Aug 20 09:23││/MYDATA                              │   4096│Jul 30 18:14││/.cache                              │   4096│Jul 30 17:35││/aian-model                          │   4096│Aug 29 17:22││/.config                             │   4096│Aug 13 16:41││/aian-vector                         │   4096│Jul 31 06:22││/.kosmos                             │   4096│Aug 25 14:36││/eng_verbs                           │   4096│Aug 12 16:33││/.local                              │   4096│Jul 30 17:35││/kosmos-panel                        │   4096│Sep  1 06:02││/.npm                                │   4096│Jul 30 18:04││ ecosystem.config.js                 │   2466│Aug 12 16:18││/.pm2                                │   4096│Aug 20 09:27││*git_pull_main.sh                    │   1695│Sep  3 08:32││/.ssh                                │   4096│Aug 26 10:55││*restart_all.sh                      │   1341│Aug 18 10:56││/MYDATA                              │   4096│Aug 12 16:45││                                     │       │            ││/projects-ex                         │   4096│Sep  3 08:32││                                     │       │            ││/searxng-docker                      │   4096│Aug  9 16:11││                                     │       │            ││ .bash_history                       │  11161│Aug 29 17:32││                                     │       │            ││ .bashrc                             │   3106│Apr 22  2024││                                     │       │            ││ .gitconfig                          │     47│Aug 26 10:31││                                     │       │            ││ .profile                            │    161│Apr 22  2024││                                     │       │            ││ .python_history                     │      0│Aug  5 18:02││                                     │       │            ││ .selected_editor                    │     66│Jul 30 17:48││                                     │       │            ││ git                                 │      0│Aug  5 17:53││                                     │       │            ││                                     │       │            ││                                     │       │            ││                                     │       │            ││                                     │       │            ││                                     │       │            │├──────────────────────────────────────────────────────────┤├──────────────────────────────────────────────────────────┤│*git_pull_main.sh                                         ││UP--DIR                                                   │└────────────────────────────────────── 480G / 491G (97%) ─┘└────────────────────────────────────── 480G / 491G (97%) ─┘Hint: To mark directories on the select dialog box, append a slash.\r\nroot@ubuntu24:~/projects-ex#[^] 1Help       2Menu       3View       4Edit       5Copy       6RenMov     7Mkdir      8Delete     9PullDn    10Quit      \b ┐",
    "serverId": "usa",
    "serverName": "usa - Мой удаленный сервер",
    "serverHost": "usa"
  },
  {
    "id": "61c501a4-49c9-4d86-9eaa-61fb96f3ee0d",
    "sessionId": "bac46334-127b-4c94-94b9-b8db9a29c549",
    "timestamp": "2025-09-03T08:32:34.664Z",
    "type": "stdin",
    "executed_command": "cd projects-ex/",
    "serverId": "usa",
    "serverName": "usa - Мой удаленный сервер",
    "serverHost": "usa"
  },
  {
    "id": "8600fba3-6d7b-4884-91df-783bbcfb0c8f",
    "sessionId": "bac46334-127b-4c94-94b9-b8db9a29c549",
    "timestamp": "2025-09-03T08:32:34.842Z",
    "type": "stdout",
    "terminal_output": "cd projects-ex/",
    "serverId": "usa",
    "serverName": "usa - Мой удаленный сервер",
    "serverHost": "usa",
    "stdin_id": "61c501a4-49c9-4d86-9eaa-61fb96f3ee0d"
  },
  {
    "id": "5e42ac92-c65a-4f24-830a-b8a1c9579984",
    "sessionId": "bac46334-127b-4c94-94b9-b8db9a29c549",
    "timestamp": "2025-09-03T08:32:55.455Z",
    "type": "stdin",
    "executed_command": "bash git_pull_main.sh",
    "serverId": "usa",
    "serverName": "usa - Мой удаленный сервер",
    "serverHost": "usa"
  },
  {
    "id": "c7b90b57-6dfa-468c-9c2b-8b7f9334b4f6",
    "sessionId": "bac46334-127b-4c94-94b9-b8db9a29c549",
    "timestamp": "2025-09-03T08:33:17.202Z",
    "type": "stdin",
    "executed_command": "FETCH_HEAD",
    "serverId": "usa",
    "serverName": "usa - Мой удаленный сервер",
    "serverHost": "usa"
  },
  {
    "id": "298c7751-bd28-4d47-b0e5-22a2cb14e3a6",
    "sessionId": "bac46334-127b-4c94-94b9-b8db9a29c549",
    "timestamp": "2025-09-03T08:33:19.739Z",
    "type": "stdout",
    "terminal_output": "bs\bash git pull\b\b\b\b\bPpull\b\b\b\b_pull\b\b\b\b_main.shpull\b\b\b\bPull\b\b\bPll\b\b\b\u0007\r\n\rgit_pull_main.sh: line 1: ﻿#!/bin/bash: No such file or directory\r\nremote: Enumerating objects: 37, done.\r\nremote: Counting objects:   3% (1/33)\rremote: Counting objects:   6% (2/33)\rremote: Counting objects:   9% (3/33)\rremote: Counting objects:  12% (4/33)\rremote: Counting objects:  15% (5/33)\rremote: Counting objects:  18% (6/33)\rremote: Counting objects:  21% (7/33)\rremote: Counting objects:  24% (8/33)\rremote: Counting objects:  27% (9/33)\rremote: Counting objects:  30% (10/33)\rremote: Counting objects:  33% (11/33)\rremote: Counting objects:  36% (12/33)\rremote: Counting objects:  39% (13/33)\rremote: Counting objects:  42% (14/33)\rremote: Counting objects:  45% (15/33)\rremote: Counting objects:  48% (16/33)\rremote: Counting objects:  51% (17/33)\rremote: Counting objects:  54% (18/33)\rremote: Counting objects:  57% (19/33)\rremote: Counting objects:  60% (20/33)\rremote: Counting objects:  63% (21/33)\rremote: Counting objects:  66% (22/33)\rremote: Counting objects:  69% (23/33)\rremote: Counting objects:  72% (24/33)\rremote: Counting objects:  75% (25/33)\rremote: Counting objects:  78% (26/33)\rremote: Counting objects:  81% (27/33)\rremote: Counting objects:  84% (28/33)\rremote: Counting objects:  87% (29/33)\rremote: Counting objects:  90% (30/33)\rremote: Counting objects:  93% (31/33)\rremote: Counting objects:  96% (32/33)\rremote: Counting objects: 100% (33/33)\rremote: Counting objects: 100% (33/33), done.\r\nremote: Compressing objects:   8% (1/12)\rremote: Compressing objects:  16% (2/12)\rremote: Compressing objects:  25% (3/12)\rremote: Compressing objects:  33% (4/12)\rremote: Compressing objects:  41% (5/12)\rremote: Compressing objects:  50% (6/12)\rremote: Compressing objects:  58% (7/12)\rremote: Compressing objects:  66% (8/12)\rremote: Compressing objects:  75% (9/12)\rremote: Compressing objects:  83% (10/12)\rremote: Compressing objects:  91% (11/12)\rremote: Compressing objects: 100% (12/12)\rremote: Compressing objects: 100% (12/12), done.\r\nremote: Total 25 (delta 14), reused 24 (delta 13), pack-reused 0 (from 0)\r\nUnpacking objects:   4% (1/25)\rUnpacking objects:   8% (2/25)\rUnpacking objects:  12% (3/25)\rUnpacking objects:  16% (4/25)\rUnpacking objects:  20% (5/25)\rUnpacking objects:  24% (6/25)\rUnpacking objects:  28% (7/25)\rUnpacking objects:  32% (8/25)\rUnpacking objects:  36% (9/25), 4.06 KiB | 6.00 KiB/s\rUnpacking objects:  40% (10/25), 4.06 KiB | 6.00 KiB/s\rUnpacking objects:  44% (11/25), 4.06 KiB | 6.00 KiB/s\rUnpacking objects:  48% (12/25), 4.06 KiB | 6.00 KiB/s\rUnpacking objects:  52% (13/25), 4.06 KiB | 6.00 KiB/s\rUnpacking objects:  56% (14/25), 4.06 KiB | 6.00 KiB/s\rUnpacking objects:  60% (15/25), 4.06 KiB | 6.00 KiB/s\rUnpacking objects:  64% (16/25), 4.06 KiB | 6.00 KiB/s\rUnpacking objects:  68% (17/25), 4.06 KiB | 6.00 KiB/s\rUnpacking objects:  72% (18/25), 4.06 KiB | 6.00 KiB/s\rUnpacking objects:  76% (19/25), 4.06 KiB | 6.00 KiB/s\rUnpacking objects:  80% (20/25), 4.06 KiB | 6.00 KiB/s\rUnpacking objects:  84% (21/25), 4.06 KiB | 6.00 KiB/s\rUnpacking objects:  88% (22/25), 4.06 KiB | 6.00 KiB/s\rUnpacking objects:  92% (23/25), 4.06 KiB | 6.00 KiB/s\rUnpacking objects:  96% (24/25), 4.06 KiB | 6.00 KiB/s\rUnpacking objects: 100% (25/25), 4.06 KiB | 6.00 KiB/s\rUnpacking objects: 100% (25/25), 59.86 KiB | 53.00 KiB/s, done.\r\nFrom github.com:danmas/kosmos-panel\r\n   8d44456..eb68dd7  main       -> origin/main\r\n   ab59a24..84e4e4d  dev        -> origin/dev\r\nОбнаружены изменения. Выполняю git pull...\r\nFrom github.com:danmas/kosmos-panel\r\n * branch            main       -> FETCH_HEAD\r\nUpdating 8d44456..eb68dd7\r\nerror: Your local changes to the following files would be overwritten by merge:\r\n\tterminal_log.json\r\nPlease commit your changes or stash them before you merge.\r\nAborting\r\n\r\n^C",
    "serverId": "usa",
    "serverName": "usa - Мой удаленный сервер",
    "serverHost": "usa",
    "stdin_id": "c7b90b57-6dfa-468c-9c2b-8b7f9334b4f6"
  },
  {
    "id": "0bf9ca58-5457-4ec2-883c-f1ca0de66e63",
    "sessionId": "bac46334-127b-4c94-94b9-b8db9a29c549",
    "timestamp": "2025-09-03T08:33:25.373Z",
    "type": "stdin",
    "executed_command": "cd kosmos-panel/",
    "serverId": "usa",
    "serverName": "usa - Мой удаленный сервер",
    "serverHost": "usa"
  },
  {
    "id": "bb9ad44c-7c28-442a-a8fb-ac28e5c5bc82",
    "sessionId": "bac46334-127b-4c94-94b9-b8db9a29c549",
    "timestamp": "2025-09-03T08:33:25.613Z",
    "type": "stdout",
    "terminal_output": "cd kosmos-panel/",
    "serverId": "usa",
    "serverName": "usa - Мой удаленный сервер",
    "serverHost": "usa",
    "stdin_id": "0bf9ca58-5457-4ec2-883c-f1ca0de66e63"
  },
  {
    "id": "fe6b9ea2-2b5d-4a0e-ba0e-6fb87237e847",
    "sessionId": "bac46334-127b-4c94-94b9-b8db9a29c549",
    "timestamp": "2025-09-03T08:33:35.966Z",
    "type": "stdin",
    "executed_command": "git status",
    "serverId": "usa",
    "serverName": "usa - Мой удаленный сервер",
    "serverHost": "usa"
  },
  {
    "id": "128e7c9b-e782-43f8-b7c7-31450448a699",
    "sessionId": "bac46334-127b-4c94-94b9-b8db9a29c549",
    "timestamp": "2025-09-03T08:33:36.255Z",
    "type": "stdout",
    "terminal_output": "ls -la\b\b\b\b\b\b\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007git status \r\n\rOn branch main\r\nYour branch is behind 'origin/main' by 4 commits, and can be fast-forwarded.\r\n  (use \"git pull\" to update your local branch)\r\n\r\nChanges not staged for commit:\r\n  (use \"git add <file>...\" to update what will be committed)\r\n  (use \"git restore <file>...\" to discard changes in working directory)\r\n\tmodified:   terminal_log.json\r\n\r\nUntracked files:\r\n  (use \"git add <file>...\" to include in what will be committed)\r\n\tinventory.json.backup.1756205856344\r\n\tinventory.json.backup.1756224904117\r\n\tinventory.json.backup.1756225002356\r\n\tinventory.json.backup.1756706541553\r\n\r\nno changes added to commit (use \"git add\" and/or \"git commit -a\")",
    "serverId": "usa",
    "serverName": "usa - Мой удаленный сервер",
    "serverHost": "usa",
    "stdin_id": "fe6b9ea2-2b5d-4a0e-ba0e-6fb87237e847"
  }
]